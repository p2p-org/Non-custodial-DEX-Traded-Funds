{"version":3,"sources":["api/connection/index.ts","api/wallet/Wallet.ts","models/app/index.ts","lib/routing/index.ts","config/index.ts","utils/common.ts","api/connection/utils/retryableProxy.ts","api/wallet/index.ts","api/wallet/SolletWallet.ts","models/wallet/index.ts","components/ui/Button/Button.tsx","components/common/Header/model.ts","components/common/Header/NavMenu/NavMenu.tsx","components/common/Header/Header.tsx","pages/home/TotalInfo/TotalInfo.tsx","components/common/Avatar/Avatar.tsx","pages/home/Funds/FundRow/FundRow.tsx","pages/home/Funds/Funds.tsx","pages/home/Home.tsx","pages/notFound/NotFound.tsx","routes.tsx","App.tsx","models/app/init.ts","models/wallet/init.ts","index.tsx","reportWebVitals.ts"],"names":["currentCluster","WalletEvent","app","createDomain","AppGate","createGate","history","createBrowserHistory","defaultCommitment","process","DEFAULT_COMMITMENT","sleep","Number","POST_TRANSACTION_SLEEP_MS","ms","Promise","resolve","setTimeout","defaultRetryOptions","count","intervalMS","backoutMultiplier","createConnection","memoizeWith","identity","network","connection","Connection","forEach","fnName","fn","retryOptions","options","mergeLeft","retryReducer","target","thisArg","argArray","previousValue","currentValue","currentIndex","a","call","apply","catch","error","sleepMs","console","log","then","Proxy","Array","reduce","retryableProxy","getNetwork","cluster","clusterApiUrl","getConnection","wallet","WalletType","Wallet","transaction","this","signTransaction","signedTransaction","emit","SIGNED","EventEmitter","DEFAULT_PROVIDER","SolletWallet","provider","solletWallet","SolletWalletAdapter","on","CONNECT","DISCONNECT","connect","publicKey","disconnect","createWallet","type","SOLLET","BONFIDA","newWallet","connectFx","createEffect","disconnectFx","$cluster","createStore","$type","createEvent","$connected","$wallet","ButtonStyled","Button","className","style","classNames","primary","hollow","connectClicked","forward","from","to","Wrapper","NavMenuLink","NavMenu","Container","Left","LogoLink","ByA","Right","Header","connected","useStore","href","rel","onClick","Description","StatsWrapper","Stats","StatsTitle","StatsValue","TotalInfo","Avatar","props","HeaderWrapper","HeaderLeft","InfoWrapper","FundName","FundDetails","FundType","FundDelimiter","FundStrategy","BottomWrapper","LikeButton","Like","FundRow","alert","Title","CreateLink","SortButton","Content","Funds","active","TotalInfoStyled","FundsStyled","Home","NotFound","Pages","useMemo","renderRoutes","isAuth","path","exact","component","map","route","needAuth","App","useGate","onCreateEffect","newEffect","failData","watch","payload","use","getState","WalletAPI","CONFIRMED","transactionSignature","info","pubkey","toBase58","done","doneData","_","createInspector","onPerfEntry","globals","ReactDOM","document","Function","getCLS","getFID","getFCP","getLCP","getTTFB"],"mappings":"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","file":"static/js/main.518f38db.chunk.js","sourcesContent":["import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  SignatureResult,\n} from '@solana/web3.js';\nimport { identity, memoizeWith } from 'ramda';\n\nimport { defaultCommitment } from 'config';\n\nimport { retryableProxy } from './utils/retryableProxy';\n\n// The default time to wait when confirming a transaction.\nexport const DEFAULT_COMMITMENT: Commitment = defaultCommitment;\n\nlet currentCluster: Cluster;\n\n// Since connection objects include state, we memoise them here per network\nconst createConnection = memoizeWith<(network: string) => Connection>(\n  identity,\n  (network) => {\n    const connection = new Connection(network, DEFAULT_COMMITMENT);\n\n    // Due to an issue with the solana back-end relating to CORS headers on 429 responses\n    // Rate-limiting responses are not retried correctly. Adding this proxy fixes this.\n    const proxiedFunctions = [\n      'getBalance',\n      'getAccountInfo',\n      'getParsedAccountInfo',\n      'getParsedProgramAccounts',\n      'getParsedTokenAccountsByOwner',\n      'getRecentBlockhash',\n      'sendTransaction',\n      'sendRawTransaction',\n      'requestAirdrop',\n    ];\n    proxiedFunctions.forEach((fnName) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      connection[fnName] = retryableProxy(connection[fnName]);\n    });\n\n    return connection;\n  },\n);\n\nexport const getNetwork = (cluster: Cluster): string => {\n  if (cluster === 'mainnet-beta') {\n    return 'https://solana-api.projectserum.com/';\n  }\n\n  return clusterApiUrl(cluster);\n};\n\nexport const getConnection = (cluster?: Cluster): Connection => {\n  if (cluster) {\n    currentCluster = cluster;\n  }\n\n  const selectedCluster = cluster || currentCluster;\n\n  const network = getNetwork(selectedCluster);\n  return createConnection(network);\n};\n\nexport const confirmTransaction = (\n  signature: string,\n  commitment?: Commitment,\n): Promise<SignatureResult> => {\n  const connection = getConnection();\n  const confirmViaSocket = new Promise<SignatureResult>((resolve) =>\n    connection.onSignature(signature, (signatureResult) => {\n      console.log('Confirmation via socket:', signatureResult);\n      resolve(signatureResult);\n    }),\n  );\n\n  const confirmViaHttp = connection\n    .confirmTransaction(signature, commitment || DEFAULT_COMMITMENT)\n    .then((signatureResult) => {\n      console.log('Confirmation via http:', signatureResult);\n      return signatureResult.value;\n    });\n\n  return Promise.race([confirmViaHttp, confirmViaSocket]);\n};\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletEvent {\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  SIGNED = 'signed',\n  CONFIRMED = 'confirmed',\n}\n\n/**\n * Abstract wallet implementation. Any wallet connection,\n * e.g. browser extension, hardware wallet, web wallet etc,\n * is a separate implementation of this.\n */\nexport abstract class Wallet extends EventEmitter {\n  private network: string;\n\n  protected constructor(network: string) {\n    super();\n    this.network = network;\n  }\n\n  abstract get pubkey(): PublicKey;\n\n  abstract disconnect(): void;\n\n  /**\n   * Sign the transaction, and emit a \"signed\" event\n   * @param transaction\n   */\n  async sign(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = await this.signTransaction(transaction);\n    this.emit(WalletEvent.SIGNED, { transaction: signedTransaction });\n\n    return signedTransaction;\n  }\n\n  /**\n   * Delegate to the underlying implementation to sign the transaction\n   * @param transaction\n   * @protected\n   */\n  protected abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n}\n","import { createDomain } from 'effector';\nimport { createGate } from 'effector-react';\n\nexport const app = createDomain();\n\nexport const AppGate = createGate();\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();\n","// the default commitment uesd by the Solana web3 connection when checking the blockchain state\nimport { Commitment } from '@solana/web3.js';\n\nexport const isDev =\n  process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n\nexport const defaultCommitment: Commitment =\n  (process.env.DEFAULT_COMMITMENT as Commitment) || 'singleGossip';\n\n// the amount of time to sleep after sending a transaction\n// in order to work around a known solana web3 bug\nexport const postTransactionSleepMS = Number(\n  process.env.POST_TRANSACTION_SLEEP_MS,\n);\n","export const sleep: (ms: number) => Promise<void> = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { mergeLeft } from 'ramda';\n\nimport { sleep } from 'utils/common';\n\ninterface RetryOptions {\n  count: number;\n  intervalMS: number;\n  backoutMultiplier: number;\n}\n\nconst defaultRetryOptions: RetryOptions = {\n  // max number of retries\n  count: 10,\n  intervalMS: 200,\n  // every retry, multiply the interval by this amount\n  backoutMultiplier: 1.5,\n};\n\ninterface GenericAsyncFunction<U, R> {\n  (...args: Array<U>): Promise<R>;\n}\n\n/**\n * Creates a Proxy wraps the function in a retry function.\n * This should be only used if the function is idempotent, i.e. retrying should\n * return the same value and have no side-effects.\n *\n * @param fn\n * @param retryOptions\n */\nexport const retryableProxy = <U, R>(\n  fn: GenericAsyncFunction<U, R>,\n  retryOptions: Partial<RetryOptions> = defaultRetryOptions,\n): GenericAsyncFunction<U, R> => {\n  // combine the passed in options with default options\n  const options = mergeLeft(retryOptions, defaultRetryOptions);\n\n  const retryReducer = <T>(\n    target: GenericAsyncFunction<U, T>,\n    thisArg: unknown,\n    argArray: Array<U>,\n  ) => async (\n    previousValue: Promise<T>,\n    currentValue: Promise<T>,\n    currentIndex: number,\n  ): Promise<T> => {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const call = async () => target.apply(thisArg, argArray);\n\n    // if it hasn't been called yet, call the function\n    if (!previousValue) {\n      return call();\n    }\n\n    //  if it has been called, and failed, catch the error, wait and retry\n    return previousValue.catch((error) => {\n      const sleepMs =\n        options.intervalMS * options.backoutMultiplier ** currentIndex;\n      console.error(error);\n      console.log(\n        `Retrying after ${sleepMs}ms. (Retried ${currentIndex} times)`,\n      );\n\n      return sleep(sleepMs).then(call);\n    });\n  };\n\n  return new Proxy(fn, {\n    // trap the \"apply\" call to the proxied function,\n    // in other words, trap the function call itself\n    apply: (target, thisArg, argArray) => {\n      // reduce over the maximum number of retries.\n      // if any of them pass, the code will short-circuit and skip the rest\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      return [...new Array(options.count)]\n        .reduce(retryReducer(target, thisArg, argArray))\n        .catch((error: Error) => {\n          console.error('No more retries, throwing.');\n          throw error;\n        });\n    },\n  });\n};\n","import {\n  Account,\n  Cluster,\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionInstructionCtorFields,\n} from '@solana/web3.js';\n\nimport { postTransactionSleepMS } from 'config';\nimport { sleep } from 'utils/common';\n\nimport {\n  confirmTransaction,\n  DEFAULT_COMMITMENT,\n  getConnection,\n  getNetwork,\n} from '../connection';\nimport { SolletWallet } from './SolletWallet';\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst POST_TRANSACTION_SLEEP_MS = postTransactionSleepMS || 500;\n\n/**\n * API for connecting to and interacting with a wallet\n */\n\n// singleton wallet for the app.\n// A user can be connected to only one wallet at a time.\nlet wallet: Wallet | null;\nlet connection: Connection | null;\n\nconst ERROR_CONNECT_FIRST = 'Connect first';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletType {\n  MANUAL,\n  SOLLET,\n  BONFIDA,\n  LOCAL,\n}\n\nconst createWallet = (type: WalletType, cluster: Cluster): Wallet => {\n  const network = getNetwork(cluster);\n  switch (type) {\n    case WalletType.SOLLET:\n      return new SolletWallet(network);\n    case WalletType.BONFIDA:\n      return new SolletWallet(network, 'https://bonfida.com/wallet');\n    default:\n      return new SolletWallet(network);\n  }\n};\n\nexport const connect = async (\n  cluster: Cluster,\n  type: WalletType,\n): Promise<Wallet> => {\n  const newWallet = createWallet(type, cluster);\n\n  // assign the singleton wallet.\n  // Using a separate variable to simplify the type definitions\n  wallet = newWallet;\n  connection = getConnection(cluster);\n\n  // connect is done once the wallet reports that it is connected.\n  return new Promise((resolve) => {\n    newWallet.on(WalletEvent.CONNECT, () => resolve(newWallet));\n  });\n};\n\nexport const disconnect = (): void => wallet?.disconnect();\n\nexport const makeTransaction = async (\n  instructions: (TransactionInstruction | TransactionInstructionCtorFields)[],\n  signers: Account[] = [],\n): Promise<Transaction> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  const { blockhash: recentBlockhash } = await connection.getRecentBlockhash();\n\n  const signatures = [{ publicKey: wallet.pubkey }, ...signers];\n  const transaction = new Transaction({\n    recentBlockhash,\n    signatures,\n  });\n  transaction.add(...instructions);\n\n  // if there are any cosigners (other than the current wallet)\n  // sign the transaction\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  return transaction;\n};\n\ninterface SendOptions {\n  commitment: Commitment;\n  preflightCommitment: Commitment;\n}\n\nconst defaultSendOptions = {\n  commitment: DEFAULT_COMMITMENT,\n  preflightCommitment: DEFAULT_COMMITMENT,\n};\n\nasync function awaitConfirmation(\n  signature: string,\n  commitment: 'max' | 'recent' | 'root' | 'single' | 'singleGossip' | undefined,\n) {\n  console.log(`Submitted transaction ${signature}, awaiting confirmation`);\n  await confirmTransaction(signature, commitment);\n  console.log(`Transaction ${signature} confirmed`);\n\n  if (wallet) {\n    wallet.emit(WalletEvent.CONFIRMED, { transactionSignature: signature });\n  }\n\n  // workaround for a known solana web3 bug where\n  // the state obtained from the http endpoint and the websocket are out of sync\n  await sleep(POST_TRANSACTION_SLEEP_MS);\n  return signature;\n}\n\nexport const sendTransaction = async (\n  transaction: Transaction,\n  {\n    commitment = defaultSendOptions.commitment,\n    preflightCommitment = defaultSendOptions.preflightCommitment,\n  }: Partial<SendOptions> = defaultSendOptions,\n): Promise<string> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  console.log('Sending signature request to wallet');\n  const signed = await wallet.sign(transaction);\n  console.log('Got signature, submitting transaction');\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    preflightCommitment,\n  });\n\n  return awaitConfirmation(signature, commitment);\n};\n\nexport const getWallet = (): Wallet => {\n  if (!wallet || !connection) {\n    throw new Error('notification.error.noWallet');\n  }\n\n  return wallet;\n};\n\nexport const getBalance = (publicKey: PublicKey): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getBalance(publicKey);\n};\n\nexport const getMinimumBalanceForRentExemption = (\n  length: number,\n): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getMinimumBalanceForRentExemption(length);\n};\n","import SolletWalletAdapter from '@project-serum/sol-wallet-adapter';\nimport { PublicKey, Transaction } from '@solana/web3.js';\n\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst DEFAULT_PROVIDER = 'https://www.sollet.io';\n\n/**\n * Wallet implementation for the sollet.io wallet.\n * It opens a popup browser window that prompts a user\n * to create and connect a simple web wallet.\n */\nexport class SolletWallet extends Wallet {\n  private solletWallet: SolletWalletAdapter;\n\n  constructor(network: string, provider: string = DEFAULT_PROVIDER) {\n    super(network);\n    this.solletWallet = new SolletWalletAdapter(provider, network);\n\n    // once the sollet wallet emits a connect or disconnect event, pass it on\n    this.solletWallet.on(WalletEvent.CONNECT, () => this.emit(WalletEvent.CONNECT));\n    this.solletWallet.on(WalletEvent.DISCONNECT, () => this.emit(WalletEvent.DISCONNECT));\n\n    void this.solletWallet.connect();\n  }\n\n  get pubkey(): PublicKey {\n    return this.solletWallet.publicKey;\n  }\n\n  disconnect(): void {\n    this.solletWallet.disconnect();\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.solletWallet.signTransaction(transaction);\n  }\n}\n","import { Cluster } from '@solana/web3.js';\nimport { WalletType } from 'api/wallet';\nimport { app } from '../app';\n\nexport const connectFx = app.createEffect<void, string>();\n\nexport const disconnectFx = app.createEffect<void, void>();\n\nexport const $cluster = app.createStore<Cluster>('devnet');\n\nexport const clusterPersisted = app.createEvent<any>();\n\nexport const $type = app.createStore<WalletType>(WalletType.SOLLET);\n\nexport const $connected = app.createStore<boolean>(false);\n\nexport const $wallet = app.createStore<string | null>(null);\n","import React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nconst ButtonStyled = styled.button`\n  display: flex;\n  align-items: center;\n\n  height: 48px;\n  padding: 0 40px;\n\n  font-family: TT Firs Neue, sans-serif;\n  font-weight: 500;\n  font-size: 16px;\n  line-height: 100%;\n\n  border-radius: 4px;\n\n  &.primary {\n    color: #fff;\n\n    background: #62cf7a;\n  }\n\n  &.hollow {\n    color: #5887ff;\n\n    background: #ffffff;\n  }\n`;\n\ninterface Props {\n  primary?: boolean;\n  hollow?: boolean;\n}\n\nexport const Button: FC<Props & ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  primary,\n  hollow,\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <ButtonStyled\n      style={style}\n      className={classNames(className, { primary, hollow })}\n    >\n      {children}\n    </ButtonStyled>\n  );\n};\n","import { forward } from 'effector';\nimport { ButtonClick } from 'types/effector';\nimport { app } from 'models/app';\nimport { connectFx } from 'models/wallet';\n\nexport const connectClicked = app.createEvent<ButtonClick>();\n\nforward({\n  from: connectClicked,\n  to: connectFx,\n});\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\nconst NavMenuLink = styled(NavLink)`\n  color: #000000;\n  font-family: TT Firs Neue, sans-serif;\n  font-size: 16px;\n  line-height: 140%;\n  opacity: 0.8;\n`;\n\nexport const NavMenu: FC = () => {\n  return (\n    <Wrapper>\n      <NavMenuLink to=\"/#funs\">Funds</NavMenuLink>\n      <NavMenuLink to=\"/#myassets\">My assets</NavMenuLink>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useStore } from 'effector-react';\nimport { Link } from 'react-router-dom';\nimport { $connected, $wallet } from 'models/wallet';\nimport { Button } from 'components/ui/Button';\nimport { connectClicked } from './model';\nimport { NavMenu } from './NavMenu';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 88px;\n  padding: 0 20px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  max-width: 1340px;\n  margin: 0 auto;\n`;\n\nconst Left = styled.div`\n  display: flex;\n`;\n\nconst LogoLink = styled(Link)`\n  font-family: TT Firs Neue, sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 140%;\n`;\n\nconst ByA = styled.a`\n  margin-left: 13px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst Right = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\nexport const Header: FC = () => {\n  const connected = useStore($connected);\n  const wallet = useStore($wallet);\n\n  return (\n    <Wrapper>\n      <Container>\n        <Left>\n          <LogoLink to=\"/\">.andromeda</LogoLink>\n          <ByA href=\"https://p2p.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            —{'     '}by p2p.org\n          </ByA>\n        </Left>\n\n        <Right>\n          <NavMenu />\n          {!connected ? (\n            <Button hollow onClick={connectClicked}>\n              Connect wallet\n            </Button>\n          ) : (\n            wallet\n          )}\n        </Right>\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 88px;\n`;\n\nconst Description = styled.div`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst StatsWrapper = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: 184px;\n  grid-gap: 20px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\n\nconst Stats = styled.div``;\n\nconst StatsTitle = styled.div`\n  margin-bottom: 10px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nconst StatsValue = styled.div`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 140%;\n`;\n\ninterface Props {}\n\nexport const TotalInfo: FC<Props & HTMLAttributes<HTMLDivElement>> = ({\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      <Description>\n        Capital under our management has shown double growth with the market\n        falling by 80%. We offer complete. ‘one-stop’ DeFi solution and are a\n        preferred lender to leading private equity investments\n      </Description>\n      <StatsWrapper>\n        <Stats>\n          <StatsTitle>Funds (Total created)</StatsTitle>\n          <StatsValue>1 200</StatsValue>\n        </Stats>\n        <Stats>\n          <StatsTitle>Investments (DeFi to $)</StatsTitle>\n          <StatsValue>2,34 M</StatsValue>\n        </Stats>\n        <Stats>\n          <StatsTitle>Average profit (per month)</StatsTitle>\n          <StatsValue>1 200</StatsValue>\n        </Stats>\n      </StatsWrapper>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  width: 56px;\n  height: 56px;\n\n  background: azure;\n  border-radius: 4px;\n`;\n\ninterface Props {}\n\nexport const Avatar: FC<Props> = (props) => {\n  return <Wrapper />;\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { Button } from 'components/ui/Button';\nimport { Avatar } from 'components/common/Avatar';\n\nimport likeImg from './like.png';\n\nconst Wrapper = styled.div`\n  background: #ffffff;\n  border-radius: 4px;\n  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.05);\n`;\n\nconst HeaderWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  padding: 24px;\n`;\n\nconst HeaderLeft = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst InfoWrapper = styled.div`\n  margin-left: 20px;\n`;\n\nconst FundName = styled.h4`\n  margin-bottom: 4px;\n\n  color: #000000;\n  font-family: TT Firs Neue, sans-serif;\n  font-weight: 500;\n  font-size: 18px;\n  line-height: 140%;\n`;\n\nconst FundDetails = styled.div`\n  display: flex;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nconst FundType = styled.div``;\n\nconst FundDelimiter = styled.div`\n  margin: 0 5px 0 10px;\n`;\n\nconst FundStrategy = styled.div`\n  color: #5887ff;\n`;\n\nconst BottomWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  padding: 16px 24px;\n\n  border-top: 1px solid rgba(163, 165, 186, 0.2);\n`;\n\nconst StatsWrapper = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-auto-columns: 184px;\n  grid-gap: 20px;\n`;\n\nconst Stats = styled.div``;\n\nconst StatsTitle = styled.div`\n  margin-bottom: 4px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-size: 14px;\n  line-height: 140%;\n`;\n\nconst StatsValue = styled.div`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 140%;\n\n  &.alert {\n    color: #ffa631;\n  }\n\n  &.profit {\n    color: #62cf7a;\n  }\n`;\n\nconst LikeButton = styled.button`\n  display: flex;\n  align-items: center;\n\n  height: 48px;\n  padding: 0 20px;\n\n  color: #000000;\n  font-family: TT Firs Neue, sans-serif;\n  font-size: 16px;\n  line-height: 100%;\n\n  background: #fbfbfd;\n  border-radius: 4px;\n`;\n\nconst Like = styled.div`\n  width: 24px;\n  height: 24px;\n  margin: -4px 10px 0 0;\n\n  background: url('${likeImg}') no-repeat 50% 50%;\n  background-size: 24px;\n`;\n\ninterface Props {}\n\nexport const FundRow: FC<Props> = (props) => {\n  return (\n    <Wrapper>\n      <HeaderWrapper>\n        <HeaderLeft>\n          <Avatar />\n          <InfoWrapper>\n            <FundName>SPFG SOL Prudential Fund — Growth</FundName>\n            <FundDetails>\n              <FundType>DeFi Tokens</FundType>\n              <FundDelimiter>|</FundDelimiter>\n              <FundStrategy>Long strategy</FundStrategy>\n            </FundDetails>\n          </InfoWrapper>\n        </HeaderLeft>\n        <Button primary>+ Invest now</Button>\n      </HeaderWrapper>\n      <BottomWrapper>\n        <StatsWrapper>\n          <Stats>\n            <StatsTitle>Fund size</StatsTitle>\n            <StatsValue>1.2M SOL</StatsValue>\n          </Stats>\n          <Stats>\n            <StatsTitle>APY</StatsTitle>\n            <StatsValue className={classNames({ alert: true })}>\n              - 3,29%\n            </StatsValue>\n          </Stats>\n          <Stats>\n            <StatsTitle>Index points</StatsTitle>\n            <StatsValue>8.9 pt</StatsValue>\n          </Stats>\n          <Stats>\n            <StatsTitle>1 Tk Price</StatsTitle>\n            <StatsValue>15 USDC</StatsValue>\n          </Stats>\n        </StatsWrapper>\n        <LikeButton>\n          <Like /> 10\n        </LikeButton>\n      </BottomWrapper>\n    </Wrapper>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { FundRow } from './FundRow';\n\nconst Wrapper = styled.div``;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  margin-bottom: 16px;\n`;\n\nconst Left = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled.h3`\n  color: #000000;\n  font-family: TT Firs Neue, sans-serif;\n  font-size: 24px;\n  line-height: 100%;\n`;\n\nconst CreateLink = styled(Link)`\n  margin-left: 24px;\n\n  color: #5887ff;\n  font-family: TT Firs Neue, sans-serif;\n  font-size: 16px;\n  line-height: 100%;\n`;\n\nconst Right = styled.div`\n  display: grid;\n  grid-auto-flow: column;\n  grid-gap: 10px;\n`;\n\nconst SortButton = styled.button`\n  height: 52px;\n  padding: 0 20px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-size: 14px;\n  line-height: 140%;\n\n  background: #fff;\n  border-radius: 4px;\n\n  &.active {\n    color: #000000;\n\n    background: #f6f6f8;\n  }\n`;\n\nconst Content = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 24px;\n`;\n\ninterface Props {}\n\nexport const Funds: FC<Props & HTMLAttributes<HTMLDivElement>> = ({\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      <Header>\n        <Left>\n          <Title>Funds</Title>\n          <CreateLink to=\"/#create\">+ Create new</CreateLink>\n        </Left>\n        <Right>\n          <SortButton className={classNames({ active: true })}>\n            Sorting 1\n          </SortButton>\n          <SortButton>Sorting 2</SortButton>\n          <SortButton>Sorting 3</SortButton>\n          <SortButton>Sorting 4</SortButton>\n        </Right>\n      </Header>\n      <Content>\n        <FundRow />\n        <FundRow />\n      </Content>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { styled } from '@linaria/react';\nimport { Header } from 'components/common/Header';\nimport { TotalInfo } from './TotalInfo';\nimport { Funds } from './Funds';\n\nconst Wrapper = styled.div`\n  min-height: 100%;\n  padding-bottom: 50px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  width: 100%;\n  max-width: 1068px;\n  margin: 80px auto;\n`;\n\nconst Title = styled.h1`\n  color: #000000;\n  font-family: TT Firs Neue, sans-serif;\n  font-size: 58px;\n  font-weight: 500;\n  line-height: 100%;\n`;\n\nconst TotalInfoStyled = styled(TotalInfo)`\n  margin-top: 56px;\n`;\n\nconst FundsStyled = styled(Funds)`\n  margin-top: 88px;\n`;\n\nexport const Home = () => {\n  return (\n    <Wrapper>\n      <Header />\n      <Container>\n        <Title>First ETF Fund built on Solana network</Title>\n        <TotalInfoStyled />\n        <FundsStyled />\n      </Container>\n    </Wrapper>\n  );\n};\n","import React from 'react';\n\nexport const NotFound = () => <div>Page not found</div>;\n","import React, { useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { renderRoutes, RouteConfig } from 'react-router-config';\n\nimport { useStore } from 'effector-react';\n\nimport { Home } from 'pages/home';\nimport { NotFound } from 'pages/notFound';\nimport { $connected } from 'models/wallet';\n\ntype RouteConfigCustom = RouteConfig & { needAuth?: boolean };\n\nexport const makeRoutes = (isAuth: boolean): RouteConfigCustom[] =>\n  ([\n    {\n      path: '/',\n      exact: true,\n      component: Home,\n    },\n    {\n      path: '*',\n      component: NotFound,\n    },\n  ] as RouteConfigCustom[]).map((route) => {\n    if (route.needAuth && route.needAuth !== isAuth) {\n      route.component = () => <Redirect to=\"/\" />;\n      return route;\n    }\n\n    return route;\n  });\n\nexport const Pages = () => {\n  // TODO: Cannot update a component (`Pages`) while rendering a different component\n  const connected = useStore($connected);\n\n  return useMemo(() => renderRoutes(makeRoutes(connected)), [connected]);\n};\n","import React from 'react';\nimport { Router } from 'react-router';\nimport { useGate } from 'effector-react';\n\nimport { AppGate } from 'models/app';\nimport { history } from 'lib/routing';\nimport { Pages } from './routes';\n\nexport const App: React.FC = () => {\n  useGate(AppGate);\n\n  return (\n    <>\n      <Router history={history}>\n        <Pages />\n      </Router>\n    </>\n  );\n};\n","import { app } from './index';\n\napp.onCreateEffect((newEffect) => {\n  newEffect.failData.watch((payload) => console.error(payload));\n});\n","import * as WalletAPI from 'api/wallet';\nimport { WalletEvent } from 'api/wallet/Wallet';\n\nimport {\n  $cluster,\n  $connected,\n  $type,\n  $wallet,\n  connectFx,\n  disconnectFx,\n} from '.';\n\nconnectFx.use(async () => {\n  const cluster = $cluster.getState();\n  const type = $type.getState();\n  const wallet = await WalletAPI.connect(cluster, type);\n\n  wallet.on(WalletEvent.DISCONNECT, () => {\n    disconnectFx();\n    console.error('Wallet disconnected');\n  });\n\n  wallet.on(WalletEvent.CONFIRMED, ({ transactionSignature }) =>\n    console.info(`Confirmed: ${transactionSignature}`),\n  );\n\n  console.info('Wallet connected');\n\n  return wallet.pubkey.toBase58();\n});\n\ndisconnectFx.use(() => {\n  WalletAPI.disconnect();\n  console.error('Wallet disconnected');\n});\n\n$connected.on(connectFx.done, () => true).on(disconnectFx, () => false);\n\n$wallet.on(connectFx.doneData, (_, wallet) => wallet);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createInspector } from 'effector-logger/inspector';\n\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport './models/init';\nimport { css } from '@linaria/core';\nimport { ress } from './styles/ress';\nimport { fonts } from 'styles/fonts';\n\ncreateInspector();\n\nexport const globals = css`\n  :global() {\n    ${ress}\n    ${fonts}\n    html,\n    body,\n    #root {\n      height: 100%;\n    }\n\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n        'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n        'Helvetica Neue', sans-serif;\n      font-feature-settings: 'kern';\n      text-rendering: optimizeLegibility;\n      -webkit-font-smoothing: antialiased;\n\n      background: #fbfbfd;\n    }\n\n    #root {\n      background-size: 100% 616px;\n      background: linear-gradient(180deg, #f0f1f5 0%, #fbfbfd 100%) no-repeat;\n    }\n\n    a {\n      text-decoration: none;\n    }\n\n    a:visited {\n      color: inherit;\n    }\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n"],"sourceRoot":""}