{"version":3,"sources":["components/ui/Input/Input.tsx","components/common/Modal/Modal.tsx","components/ui/Slider/Slider.tsx","components/modals/Withdraw/Withdraw.tsx"],"names":["Somefix","WrapperLabel","InputElement","Input","className","useState","style","classNames","isFocus","left","placeholder","value","onChange","onFocus","setIsFocus","onBlur","right","Wrapper","Header","Title","Description","CloseWrapper","Content","Modal","title","description","close","onClick","children","Progress","HandleSlot","HandleWrapper","Handle","HandleValue","rootRef","createRef","isListenerActive","e","onMouseDown","window","onTouchStart","onMove","onMovingEnd","onVisibilityChange","document","componentWillUnmount","this","removeListeners","calculateValue","clientX","max","box","current","unbound","Math","min","resetMoving","render","disabled","percent","Number","props","undefined","width","ref","defaultProps","WrapperModal","InvestWrapper","FundInfoWrapper","FundName","InputsWrapper","Footer","InvestButton","Withdraw","fundMeta","useMemo","FUNDS","fundItem","fund","size","src","fundName","prefix","postfix","nextValue","setPercentage","full","primary"],"mappings":"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","file":"static/js/3.9e28233f.chunk.js","sourcesContent":["import React, { FC, InputHTMLAttributes, useState } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport classNames from 'classnames';\r\n\r\nconst Somefix = styled.div`\r\n  min-width: 70px;\r\n\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 100%;\r\n\r\n  &.left {\r\n    text-align: left;\r\n  }\r\n\r\n  &.right {\r\n    text-align: right;\r\n  }\r\n`;\r\n\r\nconst WrapperLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  height: 56px;\r\n  padding: 0 20px;\r\n\r\n  background: #fbfbfd;\r\n  border-radius: 12px;\r\n\r\n  &.isFocus {\r\n    background: #fbfbfd;\r\n    border: 1px solid #5887ff;\r\n\r\n    ${Somefix} {\r\n      color: #000000;\r\n    }\r\n  }\r\n`;\r\n\r\nconst InputElement = styled.input`\r\n  height: 100%;\r\n  width: auto;\r\n  padding: 0 20px;\r\n\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 100%;\r\n  text-align: center;\r\n\r\n  outline: 0;\r\n\r\n  &::placeholder {\r\n    color: #a3a5ba;\r\n  }\r\n\r\n  &:focus {\r\n    color: #5887ff;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  prefix: string;\r\n  postfix: string;\r\n}\r\n\r\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\r\n  prefix,\r\n  postfix,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  style,\r\n  className,\r\n}) => {\r\n  const [isFocus, setIsFocus] = useState(false);\r\n\r\n  const handleFocus = () => {\r\n    setIsFocus(true);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setIsFocus(false);\r\n  };\r\n\r\n  return (\r\n    <WrapperLabel style={style} className={classNames(className, { isFocus })}>\r\n      <Somefix className={classNames({ left: true })}>{prefix}</Somefix>\r\n      <InputElement\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n      />\r\n      <Somefix className={classNames({ right: true })}>{postfix}</Somefix>\r\n    </WrapperLabel>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport closeImg from './close.png';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  background-color: #fff;\r\n  border-radius: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  position: relative;\r\n\r\n  padding: 20px;\r\n\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n`;\r\n\r\nconst Title = styled.div`\r\n  color: #000;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  line-height: 100%;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  margin-top: 10px;\r\n\r\n  color: rgba(0, 0, 0, 0.5);\r\n  font-size: 14px;\r\n  line-height: 17px;\r\n`;\r\n\r\nconst CloseWrapper = styled.div`\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 32px;\r\n  height: 32px;\r\n\r\n  background: #f6f6f8 url('${closeImg}') no-repeat 50% 50%;\r\n  background-size: 16px;\r\n  border-radius: 8px;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Content = styled.div``;\r\n\r\ninterface Props {\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  close?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const Modal: FunctionComponent<Props> = ({\r\n  title,\r\n  description,\r\n  close,\r\n  children,\r\n  className,\r\n}) => {\r\n  return (\r\n    <Wrapper className={className}>\r\n      <Header>\r\n        {title ? <Title>{title}</Title> : undefined}\r\n        {description ? <Description>{description}</Description> : undefined}\r\n        {close ? <CloseWrapper onClick={close} /> : undefined}\r\n      </Header>\r\n      {children ? <Content>{children}</Content> : undefined}\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React, { PureComponent, createRef } from 'react';\r\nimport { styled } from '@linaria/react';\r\nimport classNames from 'classnames';\r\nimport hamburgerImg from './hamburger.png';\r\n\r\nconst Progress = styled.div`\r\n  position: absolute;\r\n\r\n  top: 15px;\r\n  left: 0;\r\n\r\n  height: 4px;\r\n\r\n  border-radius: 2px;\r\n  background: #5887ff;\r\n`;\r\n\r\nconst HandleSlot = styled.div`\r\n  position: relative;\r\n\r\n  margin: 0 11px;\r\n`;\r\n\r\nconst HandleWrapper = styled.div`\r\n  position: absolute;\r\n\r\n  padding: 5px;\r\n  margin: -5px 0 0 -16px;\r\n`;\r\n\r\nconst Handle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n\r\n  color: #fff;\r\n\r\n  background: #ffffff url('${hamburgerImg}') no-repeat 50% 50%;\r\n  background-size: 12px 7px;\r\n  border: 1px solid rgba(163, 165, 186, 0.5);\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst HandleValue = styled.div`\r\n  width: 45px;\r\n  margin-left: -5px;\r\n  margin-top: 8px;\r\n\r\n  color: #000000;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n\r\n  height: 64px;\r\n  user-select: none;\r\n  cursor: pointer;\r\n  -webkit-tap-highlight-color: transparent;\r\n\r\n  .disabled {\r\n    cursor: default;\r\n\r\n    ${Progress} {\r\n      background: #8e8e8e;\r\n    }\r\n\r\n    ${Handle} {\r\n      border-color: #8e8e8e;\r\n      background: #8e8e8e;\r\n      cursor: default;\r\n    }\r\n  }\r\n\r\n  &:before {\r\n    position: absolute;\r\n    content: '';\r\n\r\n    top: 15px;\r\n    right: 0;\r\n    left: 0;\r\n\r\n    height: 4px;\r\n\r\n    border-radius: 2px;\r\n    background: #a3a5ba;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  value: number | string;\r\n  min: number;\r\n  max: number;\r\n  disabled?: boolean;\r\n  onChange: (nextValue: number) => void;\r\n}\r\n\r\nexport class Slider extends PureComponent<Props> {\r\n  static defaultProps = {\r\n    value: 0,\r\n    min: 0,\r\n    max: 100,\r\n  };\r\n\r\n  rootRef = createRef<HTMLDivElement>();\r\n\r\n  isListenerActive = false;\r\n\r\n  componentWillUnmount() {\r\n    this.removeListeners();\r\n  }\r\n\r\n  removeListeners() {\r\n    if (this.isListenerActive) {\r\n      this.isListenerActive = false;\r\n      window.removeEventListener('mousemove', this.onMove);\r\n      window.removeEventListener('mouseup', this.onMovingEnd);\r\n      window.removeEventListener('touchmove', this.onMove);\r\n      window.removeEventListener('touchend', this.onMovingEnd);\r\n      window.removeEventListener('visibilitychange', this.onVisibilityChange);\r\n    }\r\n  }\r\n\r\n  calculateValue(\r\n    e:\r\n      | React.MouseEvent<HTMLDivElement>\r\n      | React.TouchEvent<HTMLDivElement>\r\n      | MouseEvent\r\n      | TouchEvent,\r\n  ) {\r\n    if (!this.rootRef.current) {\r\n      return 0;\r\n    }\r\n\r\n    let { clientX } = e as React.MouseEvent<HTMLDivElement>;\r\n    if (!clientX && (e as TouchEvent).changedTouches) {\r\n      clientX = (e as TouchEvent).changedTouches[0].clientX;\r\n    }\r\n\r\n    const { min, max } = this.props;\r\n    const box = this.rootRef.current.getBoundingClientRect();\r\n    const unbound = Math.round(\r\n      min + ((max - min) * (clientX - box.left)) / box.width,\r\n    );\r\n\r\n    return Math.min(max, Math.max(min, unbound));\r\n  }\r\n\r\n  resetMoving() {\r\n    this.removeListeners();\r\n  }\r\n\r\n  onClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      value: this.calculateValue(e),\r\n    });\r\n  };\r\n\r\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      value: this.calculateValue(e),\r\n    });\r\n\r\n    if (!this.isListenerActive) {\r\n      this.isListenerActive = true;\r\n      window.addEventListener('mousemove', this.onMove);\r\n      window.addEventListener('mouseup', this.onMovingEnd);\r\n      window.addEventListener('visibilitychange', this.onVisibilityChange);\r\n    }\r\n  };\r\n\r\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\r\n    e.preventDefault();\r\n\r\n    this.setState({\r\n      value: this.calculateValue(e),\r\n    });\r\n\r\n    if (!this.isListenerActive) {\r\n      this.isListenerActive = true;\r\n      window.addEventListener('touchmove', this.onMove);\r\n      window.addEventListener('touchend', this.onMovingEnd);\r\n      window.addEventListener('visibilitychange', this.onVisibilityChange);\r\n    }\r\n  };\r\n\r\n  onMove = (e: MouseEvent | TouchEvent) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onChange(this.calculateValue(e));\r\n  };\r\n\r\n  onMovingEnd = (e: MouseEvent | TouchEvent) => {\r\n    e.preventDefault();\r\n\r\n    this.resetMoving();\r\n    this.props.onChange(this.calculateValue(e));\r\n  };\r\n\r\n  onVisibilityChange = () => {\r\n    if (document.hidden) {\r\n      this.resetMoving();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { min, max, disabled } = this.props;\r\n    const value = Number(this.props.value);\r\n    const percent = (100 * (value - min)) / (max - min) || 0;\r\n\r\n    return (\r\n      <Wrapper\r\n        onClick={disabled ? undefined : this.onClick}\r\n        onMouseDown={disabled ? undefined : this.onMouseDown}\r\n        onTouchStart={disabled ? undefined : this.onTouchStart}\r\n        className={classNames({ disabled })}\r\n      >\r\n        <Progress style={{ width: `${percent}%` }} />\r\n        <HandleSlot ref={this.rootRef}>\r\n          <HandleWrapper style={{ left: `${percent}%` }}>\r\n            <Handle />\r\n            <HandleValue>{percent}%</HandleValue>\r\n          </HandleWrapper>\r\n        </HandleSlot>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n","import React, { FC, useMemo, useState } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport { Modal } from 'components/common/Modal';\r\nimport { Button } from 'components/ui/Button';\r\nimport { Avatar } from 'components/common/Avatar';\r\nimport { Input } from 'components/ui/Input';\r\nimport { Slider } from 'components/ui/Slider';\r\nimport { FundType } from '../../../models/types';\r\nimport { FUNDS } from '../../../config/funds';\r\n\r\nconst WrapperModal = styled(Modal)`\r\n  flex-basis: 512px;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  & > :not(:last-child) {\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n\r\nconst InvestWrapper = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst FundInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  padding: 32px 0;\r\n`;\r\n\r\nconst FundName = styled.div`\r\n  margin-top: 8px;\r\n\r\n  color: #000000;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n`;\r\n\r\nconst InputsWrapper = styled.div`\r\n  margin-bottom: 32px;\r\n`;\r\n\r\nconst AvailableBalanceWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n\r\n  margin: 16px 0 25px;\r\n`;\r\n\r\nconst AvailableBalance = styled.div`\r\n  color: #5887ff;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TransactionInfoWrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst InfoLine = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nconst InfoLeft = styled.div`\r\n  color: #a3a5ba;\r\n`;\r\n\r\nconst InfoRight = styled.div`\r\n  color: #000000;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  padding: 24px 20px;\r\n`;\r\n\r\nconst InvestButton = styled(Button)`\r\n  height: 56px;\r\n\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 140%;\r\n`;\r\n\r\ninterface Props {\r\n  fund: FundType;\r\n  close: () => void;\r\n}\r\n\r\nexport const Withdraw: FC<Props> = ({ fund, close }) => {\r\n  const [percentage, setPercentage] = useState(0);\r\n\r\n  const fundMeta = useMemo(\r\n    () =>\r\n      FUNDS.devnet.find(\r\n        (fundItem) => fundItem.address === fund.pubkey.toBase58(),\r\n      ),\r\n    [fund],\r\n  );\r\n\r\n  const handlePercentageChange = (nextValue: number) => {\r\n    setPercentage(nextValue);\r\n  };\r\n\r\n  return (\r\n    <WrapperModal title=\"Withdraw\" close={close}>\r\n      <Wrapper>\r\n        <InvestWrapper>\r\n          <FundInfoWrapper>\r\n            <Avatar size={64} src={fundMeta?.icon} />\r\n            <FundName>\r\n              {fundMeta\r\n                ? `${fundMeta.fundName} (${fundMeta.fundSymbol})`\r\n                : fund.account.data.name}\r\n            </FundName>\r\n          </FundInfoWrapper>\r\n          <InputsWrapper>\r\n            <Input prefix=\"Amount\" postfix=\"ABDFS\" placeholder=\"0.0\" />\r\n            {/* <AvailableBalanceWrapper>\r\n              <AvailableBalance>\r\n                Available balance: 21.1507 ABDFS\r\n              </AvailableBalance>\r\n            </AvailableBalanceWrapper> */}\r\n            <Slider\r\n              value={percentage}\r\n              min={0}\r\n              max={100}\r\n              onChange={handlePercentageChange}\r\n            />\r\n          </InputsWrapper>\r\n        </InvestWrapper>\r\n        {/* <TransactionInfoWrapper>\r\n          <InfoLine>\r\n            <InfoLeft>You’ll receive:</InfoLeft>\r\n            <InfoRight>21.1507 ABDFS</InfoRight>\r\n          </InfoLine>\r\n          <InfoLine>\r\n            <InfoLeft>Transaction Fee:</InfoLeft>\r\n            <InfoRight>0.00012 SOL</InfoRight>\r\n          </InfoLine>\r\n        </TransactionInfoWrapper> */}\r\n        <Footer>\r\n          <InvestButton full primary disabled>\r\n            Temporarily unavailable\r\n          </InvestButton>\r\n        </Footer>\r\n      </Wrapper>\r\n    </WrapperModal>\r\n  );\r\n};\r\n"],"sourceRoot":""}