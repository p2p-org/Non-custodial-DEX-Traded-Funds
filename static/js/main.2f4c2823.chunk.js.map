{"version":3,"sources":["api/connection/index.ts","api/wallet/Wallet.ts","models/app/index.ts","lib/routing/index.ts","config/index.ts","utils/common.ts","api/connection/utils/retryableProxy.ts","api/wallet/index.ts","api/wallet/SolletWallet.ts","models/wallet/index.ts","components/common/Header/model.ts","components/common/Header/NavMenu/NavMenu.tsx","components/common/Header/Header.tsx","components/common/MainContainer/MainContainer.tsx","models/modals/index.ts","components/common/ModalManager/constants.ts","pages/home/Funds/common/Column/Column.ts","pages/home/Funds/FundRow/FundRow.tsx","components/ui/Icon/assets/arrow-triangle-icon.svg","components/ui/Icon/assets/checkmark-icon.svg","components/ui/Icon/Icon.tsx","pages/home/Funds/Selector/Selector.tsx","pages/home/Funds/Funds.tsx","pages/home/Home.tsx","routes.tsx","components/common/ModalManager/ModalManager.tsx","App.tsx","models/app/init.ts","models/wallet/init.ts","models/modals/init.ts","index.tsx","reportWebVitals.ts","components/common/Avatar/Avatar.tsx","components/ui/Button/Button.tsx"],"names":["currentCluster","WalletEvent","app","createDomain","AppGate","createGate","history","createBrowserHistory","basename","window","location","pathname","defaultCommitment","process","DEFAULT_COMMITMENT","sleep","Number","POST_TRANSACTION_SLEEP_MS","ms","Promise","resolve","setTimeout","defaultRetryOptions","count","intervalMS","backoutMultiplier","createConnection","memoizeWith","identity","network","connection","Connection","forEach","fnName","fn","retryOptions","options","mergeLeft","retryReducer","target","thisArg","argArray","previousValue","currentValue","currentIndex","a","call","apply","catch","error","sleepMs","console","log","then","Proxy","Array","reduce","retryableProxy","getNetwork","cluster","clusterApiUrl","getConnection","wallet","WalletType","Wallet","transaction","this","signTransaction","signedTransaction","emit","SIGNED","EventEmitter","DEFAULT_PROVIDER","SolletWallet","provider","solletWallet","SolletWalletAdapter","on","CONNECT","DISCONNECT","connect","publicKey","disconnect","createWallet","type","SOLLET","BONFIDA","newWallet","connectFx","createEffect","disconnectFx","$cluster","createStore","$type","createEvent","$connected","$wallet","connectClicked","forward","from","to","Wrapper","NavMenuLink","NavMenu","Container","Left","LogoLink","ByA","Right","Header","connected","useStore","href","rel","primary","onClick","MainContainer","className","style","$modals","closeModalFx","closeModal","openModalFx","openModal","MODAL_INVEST","MODAL_WITHDRAW","Column","TopWrapper","InfoWrapper","FundName","FundDate","ColumnValue","AdditionalInfo","ColumnButtons","ButtonStyled","BottomWrapper","TokenSharesRow","TokenShare","TokenName","TokenShareValue","FundRow","props","modalType","classNames","name","marketCap","price","since","profit","balance","disabled","e","size","iconsMap","Map","arrowTriangle","checkmark","Icon","height","width","validProps","Object","keys","prop","isPropValid","icon","get","viewBox","xlinkHref","id","SelectorWrapper","ArrowWrapper","ArrowIcon","DropDownList","Selector","children","selectorRef","useRef","useState","handleAwayClick","setIsOpen","useEffect","ref","isOpen","Title","ColumnsHeader","ColumnName","FundList","Funds","Description","FundsStyled","Home","Pages","useMemo","renderRoutes","isAuth","path","exact","component","map","route","needAuth","ModalContainer","ModalWrapper","ModalBackground","modalsMap","lazy","ModalManager","modals","closeTopModal","modal","last","modalId","modalRef","modalsRefs","handleWrapperClick","dialogs","ModalComponent","getReadyDialogs","createRef","setModalsRefs","state","fallback","key","close","result","App","useGate","onCreateEffect","newEffect","failData","watch","payload","use","getState","WalletAPI","CONFIRMED","transactionSignature","info","pubkey","toBase58","done","doneData","_","promises","Error","dialogInfo","delete","some","promise","set","filter","dialog","concat","createInspector","onPerfEntry","globals","ReactDOM","document","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Avatar","src","ButtonElement","Button","hollow","full"],"mappings":"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","file":"static/js/main.2f4c2823.chunk.js","sourcesContent":["import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  SignatureResult,\n} from '@solana/web3.js';\nimport { identity, memoizeWith } from 'ramda';\n\nimport { defaultCommitment } from 'config';\n\nimport { retryableProxy } from './utils/retryableProxy';\n\n// The default time to wait when confirming a transaction.\nexport const DEFAULT_COMMITMENT: Commitment = defaultCommitment;\n\nlet currentCluster: Cluster;\n\n// Since connection objects include state, we memoise them here per network\nconst createConnection = memoizeWith<(network: string) => Connection>(\n  identity,\n  (network) => {\n    const connection = new Connection(network, DEFAULT_COMMITMENT);\n\n    // Due to an issue with the solana back-end relating to CORS headers on 429 responses\n    // Rate-limiting responses are not retried correctly. Adding this proxy fixes this.\n    const proxiedFunctions = [\n      'getBalance',\n      'getAccountInfo',\n      'getParsedAccountInfo',\n      'getParsedProgramAccounts',\n      'getParsedTokenAccountsByOwner',\n      'getRecentBlockhash',\n      'sendTransaction',\n      'sendRawTransaction',\n      'requestAirdrop',\n    ];\n    proxiedFunctions.forEach((fnName) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      connection[fnName] = retryableProxy(connection[fnName]);\n    });\n\n    return connection;\n  },\n);\n\nexport const getNetwork = (cluster: Cluster): string => {\n  if (cluster === 'mainnet-beta') {\n    return 'https://solana-api.projectserum.com/';\n  }\n\n  return clusterApiUrl(cluster);\n};\n\nexport const getConnection = (cluster?: Cluster): Connection => {\n  if (cluster) {\n    currentCluster = cluster;\n  }\n\n  const selectedCluster = cluster || currentCluster;\n\n  const network = getNetwork(selectedCluster);\n  return createConnection(network);\n};\n\nexport const confirmTransaction = (\n  signature: string,\n  commitment?: Commitment,\n): Promise<SignatureResult> => {\n  const connection = getConnection();\n  const confirmViaSocket = new Promise<SignatureResult>((resolve) =>\n    connection.onSignature(signature, (signatureResult) => {\n      console.log('Confirmation via socket:', signatureResult);\n      resolve(signatureResult);\n    }),\n  );\n\n  const confirmViaHttp = connection\n    .confirmTransaction(signature, commitment || DEFAULT_COMMITMENT)\n    .then((signatureResult) => {\n      console.log('Confirmation via http:', signatureResult);\n      return signatureResult.value;\n    });\n\n  return Promise.race([confirmViaHttp, confirmViaSocket]);\n};\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletEvent {\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  SIGNED = 'signed',\n  CONFIRMED = 'confirmed',\n}\n\n/**\n * Abstract wallet implementation. Any wallet connection,\n * e.g. browser extension, hardware wallet, web wallet etc,\n * is a separate implementation of this.\n */\nexport abstract class Wallet extends EventEmitter {\n  private network: string;\n\n  protected constructor(network: string) {\n    super();\n    this.network = network;\n  }\n\n  abstract get pubkey(): PublicKey;\n\n  abstract disconnect(): void;\n\n  /**\n   * Sign the transaction, and emit a \"signed\" event\n   * @param transaction\n   */\n  async sign(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = await this.signTransaction(transaction);\n    this.emit(WalletEvent.SIGNED, { transaction: signedTransaction });\n\n    return signedTransaction;\n  }\n\n  /**\n   * Delegate to the underlying implementation to sign the transaction\n   * @param transaction\n   * @protected\n   */\n  protected abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n}\n","import { createDomain } from 'effector';\nimport { createGate } from 'effector-react';\n\nexport const app = createDomain();\n\nexport const AppGate = createGate();\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory({\n  basename: window.location.pathname,\n});\n","// the default commitment uesd by the Solana web3 connection when checking the blockchain state\nimport { Commitment } from '@solana/web3.js';\n\nexport const isDev =\n  process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n\nexport const defaultCommitment: Commitment =\n  (process.env.DEFAULT_COMMITMENT as Commitment) || 'singleGossip';\n\n// the amount of time to sleep after sending a transaction\n// in order to work around a known solana web3 bug\nexport const postTransactionSleepMS = Number(\n  process.env.POST_TRANSACTION_SLEEP_MS,\n);\n","export const sleep: (ms: number) => Promise<void> = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n","import { mergeLeft } from 'ramda';\n\nimport { sleep } from 'utils/common';\n\ninterface RetryOptions {\n  count: number;\n  intervalMS: number;\n  backoutMultiplier: number;\n}\n\nconst defaultRetryOptions: RetryOptions = {\n  // max number of retries\n  count: 10,\n  intervalMS: 200,\n  // every retry, multiply the interval by this amount\n  backoutMultiplier: 1.5,\n};\n\ninterface GenericAsyncFunction<U, R> {\n  (...args: Array<U>): Promise<R>;\n}\n\n/**\n * Creates a Proxy wraps the function in a retry function.\n * This should be only used if the function is idempotent, i.e. retrying should\n * return the same value and have no side-effects.\n *\n * @param fn\n * @param retryOptions\n */\nexport const retryableProxy = <U, R>(\n  fn: GenericAsyncFunction<U, R>,\n  retryOptions: Partial<RetryOptions> = defaultRetryOptions,\n): GenericAsyncFunction<U, R> => {\n  // combine the passed in options with default options\n  const options = mergeLeft(retryOptions, defaultRetryOptions);\n\n  const retryReducer = <T>(\n    target: GenericAsyncFunction<U, T>,\n    thisArg: unknown,\n    argArray: Array<U>,\n  ) => async (\n    previousValue: Promise<T>,\n    currentValue: Promise<T>,\n    currentIndex: number,\n  ): Promise<T> => {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const call = async () => target.apply(thisArg, argArray);\n\n    // if it hasn't been called yet, call the function\n    if (!previousValue) {\n      return call();\n    }\n\n    //  if it has been called, and failed, catch the error, wait and retry\n    return previousValue.catch((error) => {\n      const sleepMs =\n        options.intervalMS * options.backoutMultiplier ** currentIndex;\n      console.error(error);\n      console.log(\n        `Retrying after ${sleepMs}ms. (Retried ${currentIndex} times)`,\n      );\n\n      return sleep(sleepMs).then(call);\n    });\n  };\n\n  return new Proxy(fn, {\n    // trap the \"apply\" call to the proxied function,\n    // in other words, trap the function call itself\n    apply: (target, thisArg, argArray) => {\n      // reduce over the maximum number of retries.\n      // if any of them pass, the code will short-circuit and skip the rest\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      return [...new Array(options.count)]\n        .reduce(retryReducer(target, thisArg, argArray))\n        .catch((error: Error) => {\n          console.error('No more retries, throwing.');\n          throw error;\n        });\n    },\n  });\n};\n","import {\n  Account,\n  Cluster,\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionInstructionCtorFields,\n} from '@solana/web3.js';\n\nimport { postTransactionSleepMS } from 'config';\nimport { sleep } from 'utils/common';\n\nimport {\n  confirmTransaction,\n  DEFAULT_COMMITMENT,\n  getConnection,\n  getNetwork,\n} from '../connection';\nimport { SolletWallet } from './SolletWallet';\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst POST_TRANSACTION_SLEEP_MS = postTransactionSleepMS || 500;\n\n/**\n * API for connecting to and interacting with a wallet\n */\n\n// singleton wallet for the app.\n// A user can be connected to only one wallet at a time.\nlet wallet: Wallet | null;\nlet connection: Connection | null;\n\nconst ERROR_CONNECT_FIRST = 'Connect first';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletType {\n  MANUAL,\n  SOLLET,\n  BONFIDA,\n  LOCAL,\n}\n\nconst createWallet = (type: WalletType, cluster: Cluster): Wallet => {\n  const network = getNetwork(cluster);\n  switch (type) {\n    case WalletType.SOLLET:\n      return new SolletWallet(network);\n    case WalletType.BONFIDA:\n      return new SolletWallet(network, 'https://bonfida.com/wallet');\n    default:\n      return new SolletWallet(network);\n  }\n};\n\nexport const connect = async (\n  cluster: Cluster,\n  type: WalletType,\n): Promise<Wallet> => {\n  const newWallet = createWallet(type, cluster);\n\n  // assign the singleton wallet.\n  // Using a separate variable to simplify the type definitions\n  wallet = newWallet;\n  connection = getConnection(cluster);\n\n  // connect is done once the wallet reports that it is connected.\n  return new Promise((resolve) => {\n    newWallet.on(WalletEvent.CONNECT, () => resolve(newWallet));\n  });\n};\n\nexport const disconnect = (): void => wallet?.disconnect();\n\nexport const makeTransaction = async (\n  instructions: (TransactionInstruction | TransactionInstructionCtorFields)[],\n  signers: Account[] = [],\n): Promise<Transaction> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  const { blockhash: recentBlockhash } = await connection.getRecentBlockhash();\n\n  const signatures = [{ publicKey: wallet.pubkey }, ...signers];\n  const transaction = new Transaction({\n    recentBlockhash,\n    signatures,\n  });\n  transaction.add(...instructions);\n\n  // if there are any cosigners (other than the current wallet)\n  // sign the transaction\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  return transaction;\n};\n\ninterface SendOptions {\n  commitment: Commitment;\n  preflightCommitment: Commitment;\n}\n\nconst defaultSendOptions = {\n  commitment: DEFAULT_COMMITMENT,\n  preflightCommitment: DEFAULT_COMMITMENT,\n};\n\nasync function awaitConfirmation(\n  signature: string,\n  commitment: 'max' | 'recent' | 'root' | 'single' | 'singleGossip' | undefined,\n) {\n  console.log(`Submitted transaction ${signature}, awaiting confirmation`);\n  await confirmTransaction(signature, commitment);\n  console.log(`Transaction ${signature} confirmed`);\n\n  if (wallet) {\n    wallet.emit(WalletEvent.CONFIRMED, { transactionSignature: signature });\n  }\n\n  // workaround for a known solana web3 bug where\n  // the state obtained from the http endpoint and the websocket are out of sync\n  await sleep(POST_TRANSACTION_SLEEP_MS);\n  return signature;\n}\n\nexport const sendTransaction = async (\n  transaction: Transaction,\n  {\n    commitment = defaultSendOptions.commitment,\n    preflightCommitment = defaultSendOptions.preflightCommitment,\n  }: Partial<SendOptions> = defaultSendOptions,\n): Promise<string> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  console.log('Sending signature request to wallet');\n  const signed = await wallet.sign(transaction);\n  console.log('Got signature, submitting transaction');\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    preflightCommitment,\n  });\n\n  return awaitConfirmation(signature, commitment);\n};\n\nexport const getWallet = (): Wallet => {\n  if (!wallet || !connection) {\n    throw new Error('notification.error.noWallet');\n  }\n\n  return wallet;\n};\n\nexport const getBalance = (publicKey: PublicKey): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getBalance(publicKey);\n};\n\nexport const getMinimumBalanceForRentExemption = (\n  length: number,\n): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getMinimumBalanceForRentExemption(length);\n};\n","import SolletWalletAdapter from '@project-serum/sol-wallet-adapter';\nimport { PublicKey, Transaction } from '@solana/web3.js';\n\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst DEFAULT_PROVIDER = 'https://www.sollet.io';\n\n/**\n * Wallet implementation for the sollet.io wallet.\n * It opens a popup browser window that prompts a user\n * to create and connect a simple web wallet.\n */\nexport class SolletWallet extends Wallet {\n  private solletWallet: SolletWalletAdapter;\n\n  constructor(network: string, provider: string = DEFAULT_PROVIDER) {\n    super(network);\n    this.solletWallet = new SolletWalletAdapter(provider, network);\n\n    // once the sollet wallet emits a connect or disconnect event, pass it on\n    this.solletWallet.on(WalletEvent.CONNECT, () => this.emit(WalletEvent.CONNECT));\n    this.solletWallet.on(WalletEvent.DISCONNECT, () => this.emit(WalletEvent.DISCONNECT));\n\n    void this.solletWallet.connect();\n  }\n\n  get pubkey(): PublicKey {\n    return this.solletWallet.publicKey;\n  }\n\n  disconnect(): void {\n    this.solletWallet.disconnect();\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.solletWallet.signTransaction(transaction);\n  }\n}\n","import { Cluster } from '@solana/web3.js';\nimport { WalletType } from 'api/wallet';\nimport { app } from '../app';\n\nexport const connectFx = app.createEffect<void, string>();\n\nexport const disconnectFx = app.createEffect<void, void>();\n\nexport const $cluster = app.createStore<Cluster>('devnet');\n\nexport const clusterPersisted = app.createEvent<any>();\n\nexport const $type = app.createStore<WalletType>(WalletType.SOLLET);\n\nexport const $connected = app.createStore<boolean>(false);\n\nexport const $wallet = app.createStore<string | null>(null);\n","import { forward } from 'effector';\nimport { ButtonClick } from 'types/effector';\nimport { app } from 'models/app';\nimport { connectFx } from 'models/wallet';\n\nexport const connectClicked = app.createEvent<ButtonClick>();\n\nforward({\n  from: connectClicked,\n  to: connectFx,\n});\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\nconst NavMenuLink = styled(NavLink)`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n  opacity: 0.8;\n`;\n\nexport const NavMenu: FC = () => {\n  return (\n    <Wrapper>\n      <NavMenuLink to=\"/#myassets\">My assets</NavMenuLink>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useStore } from 'effector-react';\nimport { Link } from 'react-router-dom';\nimport { $connected } from 'models/wallet';\nimport { Button } from 'components/ui/Button';\nimport { connectClicked } from './model';\nimport { NavMenu } from './NavMenu';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 88px;\n  padding: 0 50px;\n\n  background: #ffffff;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.05);\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  max-width: 1340px;\n  margin: 0 auto;\n`;\n\nconst Left = styled.div`\n  display: flex;\n`;\n\nconst LogoLink = styled(Link)`\n  font-family: TT Firs Neue, sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 140%;\n`;\n\nconst ByA = styled.a`\n  margin-left: 13px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst Right = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\ninterface Props {}\n\nexport const Header: FC<Props> = () => {\n  const connected = useStore($connected);\n\n  return (\n    <Wrapper>\n      <Container>\n        <Left>\n          <LogoLink to=\"/\">.andromeda</LogoLink>\n          <ByA href=\"https://p2p.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            —{'     '}by p2p.org\n          </ByA>\n        </Left>\n\n        <Right>\n          <NavMenu />\n          {!connected ? (\n            <Button primary onClick={connectClicked}>\n              Connect wallet\n            </Button>\n          ) : null}\n        </Right>\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  max-width: 1068px;\n  margin: 0 auto;\n`;\n\nexport const MainContainer: FC<HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      {children}\n    </Wrapper>\n  );\n};\n","import { app } from 'models/app';\nimport { ModalsState, ModalState } from './types';\n\nexport const $modals = app.createStore<ModalsState>([]);\n\nexport const closeModalFx = app.createEffect<\n  {\n    modalId: number;\n    result?: any;\n  },\n  void\n>();\n\nexport const closeModal = app.createEvent<{ modalId: number }>();\n\nexport const openModalFx = app.createEffect<\n  {\n    modalType: string;\n    props?: any;\n  },\n  Promise<unknown>\n>();\n\nexport const openModal = app.createEvent<ModalState>();\n","export const MODAL_INVEST = 'MODAL_INVEST';\nexport const MODAL_WITHDRAW = 'MODAL_WITHDRAW';\n","import { styled } from '@linaria/react';\n\nexport const Column = styled.div`\n  display: flex;\n\n  width: 100%;\n\n  &.name {\n    max-width: 263px;\n  }\n\n  &.marketCap {\n    max-width: 169px;\n  }\n\n  &.price {\n    max-width: 123px;\n  }\n\n  &.since {\n    max-width: 154px;\n  }\n\n  &.balance {\n    max-width: 121px;\n  }\n`;\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { Button } from 'components/ui/Button';\n\nimport { Avatar } from 'components/common/Avatar';\nimport { openModalFx } from 'models/modals';\nimport {\n  MODAL_INVEST,\n  MODAL_WITHDRAW,\n} from 'components/common/ModalManager/constants';\nimport { Column } from '../common/Column';\n\nconst TopWrapper = styled.div`\n  display: flex;\n  flex-flow: nowrap;\n\n  padding: 24px;\n`;\n\nconst InfoWrapper = styled.div`\n  margin-left: 12px;\n`;\n\nconst FundName = styled.h4`\n  margin-bottom: 4px;\n\n  color: #5887ff;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst FundDate = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-size: 12px;\n  line-height: 140%;\n`;\n\nconst ColumnValue = styled(Column)`\n  flex-direction: column;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n\n  &.price {\n    font-weight: 700;\n  }\n\n  &.alert {\n    color: #ffa631;\n  }\n\n  &.profit {\n    color: #62cf7a;\n  }\n`;\n\nconst AdditionalInfo = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-size: 13px;\n  line-height: 140%;\n`;\n\nconst ColumnButtons = styled.div`\n  opacity: 0;\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  background: #ffffff;\n  box-shadow: 0 8px 8px rgba(0, 0, 0, 0.03);\n  border-radius: 12px;\n\n  cursor: pointer;\n\n  transition: box-shadow 100ms cubic-bezier(0.64, 0, 0.35, 1) 0s;\n\n  &:hover {\n    box-shadow: 0 8px 24px #d1d1d1;\n\n    ${ColumnButtons} {\n      opacity: 1;\n\n      visibility: visible;\n    }\n  }\n`;\n\nconst ButtonStyled = styled(Button)`\n  padding: 0 16px;\n`;\n\nconst BottomWrapper = styled.div`\n  display: grid;\n  grid-auto-columns: 1fr max-content;\n  grid-auto-flow: column;\n\n  padding: 16px 24px;\n\n  border-top: 1px solid rgba(163, 165, 186, 0.2);\n`;\n\nconst TokenSharesRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TokenShare = styled.div`\n  display: flex;\n  align-items: center;\n\n  min-width: 108px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-size: 12px;\n  line-height: 140%;\n`;\n\nconst TokenName = styled.div`\n  margin-left: 12px;\n\n  font-weight: 600;\n`;\n\nconst TokenShareValue = styled.div`\n  display: inline-block;\n\n  font-weight: 400;\n`;\n\ninterface Props {}\n\nexport const FundRow: FC<Props> = (props) => {\n  const handleOpenInvestModalClick = () => {\n    openModalFx({ modalType: MODAL_INVEST });\n  };\n\n  const handleOpenWithdrawModalClick = (\n    e: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    e.stopPropagation();\n\n    openModalFx({ modalType: MODAL_WITHDRAW });\n  };\n\n  return (\n    <Wrapper onClick={handleOpenInvestModalClick}>\n      <TopWrapper>\n        <Column className={classNames({ name: true })}>\n          <Avatar />\n          <InfoWrapper>\n            <FundName>Alameda Bull DTF (ABDFS)</FundName>\n            <FundDate>Inception date: Feb 26, 2021</FundDate>\n          </InfoWrapper>\n        </Column>\n        <ColumnValue className={classNames({ marketCap: true })}>\n          $12,000,000.21\n        </ColumnValue>\n        <ColumnValue className={classNames({ price: true })}>\n          $124.91\n        </ColumnValue>\n        <ColumnValue className={classNames({ since: true, profit: true })}>\n          + 420.01%\n        </ColumnValue>\n        <ColumnValue className={classNames({ balance: true })}>\n          <div>48.00 ABDFS</div>\n          <AdditionalInfo>Valuation: $5952</AdditionalInfo>\n        </ColumnValue>\n\n        <ColumnButtons>\n          <ButtonStyled\n            primary\n            disabled={false}\n            onClick={handleOpenWithdrawModalClick}\n          >\n            Withdraw\n          </ButtonStyled>\n          <ButtonStyled primary>+ Invest</ButtonStyled>\n        </ColumnButtons>\n      </TopWrapper>\n      <BottomWrapper>\n        <TokenSharesRow>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n          <TokenShare>\n            <Avatar size={18} />\n            <TokenName>\n              FTT <TokenShareValue>33.11%</TokenShareValue>\n            </TokenName>\n          </TokenShare>\n        </TokenSharesRow>\n      </BottomWrapper>\n    </Wrapper>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/arrow-triangle-icon.12c58ff8.svg\";","export default __webpack_public_path__ + \"static/media/checkmark-icon.26a65993.svg\";","import React from 'react';\n\nimport isPropValid from '@emotion/is-prop-valid';\nimport { CSSProperties } from '@linaria/core';\n\nimport { SvgIconType } from 'types/custon';\nimport arrowTriangle from './assets/arrow-triangle-icon.svg';\nimport checkmark from './assets/checkmark-icon.svg';\n\n// TODO: check thats wrong with type\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst iconsMap = new Map<string, SvgIconType>([\n  ['arrow-triangle', arrowTriangle],\n  ['checkmark', checkmark],\n]);\n\nexport interface IconType {\n  name: string;\n  size?: string | number;\n  height?: string | number;\n  width?: string | number;\n  style?: CSSProperties;\n  className?: string;\n}\n\nexport const Icon: React.FunctionComponent<IconType> = ({\n  name,\n  size,\n  height,\n  width,\n  ...props\n}) => {\n  const validProps: {\n    [prop: string]: any;\n  } = {};\n\n  Object.keys(props).forEach((prop) => {\n    if (isPropValid(prop)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      validProps[prop] = props[prop];\n    }\n  });\n\n  const icon = iconsMap.get(name);\n\n  if (!icon) {\n    return null;\n  }\n\n  return (\n    <svg\n      {...validProps}\n      viewBox={icon.viewBox}\n      height={size || height}\n      width={size || width}\n    >\n      <use xlinkHref={`#${icon.id}`} />\n    </svg>\n  );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { Cluster } from '@solana/web3.js';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui/Icon';\n\nimport { ItemRow } from './ItemRow';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nconst SelectorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 153px;\n  margin: 4px;\n\n  cursor: pointer;\n\n  &.isOpen,\n  &:hover {\n  }\n`;\n\nconst ArrowWrapper = styled.div`\n  margin-right: 4px;\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nconst DropDownList = styled.div`\n  position: absolute;\n  right: 0;\n  z-index: 1;\n\n  min-width: 204px;\n  margin-top: 8px;\n  padding: 8px;\n\n  background: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n`;\n\nexport const Selector: FunctionComponent = ({ children }) => {\n  const selectorRef = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (!selectorRef.current?.contains(e.target as HTMLDivElement)) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick);\n    };\n  }, []);\n\n  const handleSelectorClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleItemClick = (newCluster: Cluster) => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Wrapper ref={selectorRef}>\n      <SelectorWrapper\n        onClick={handleSelectorClick}\n        className={classNames({ isOpen })}\n      >\n        {children}\n        <ArrowWrapper>\n          <ArrowIcon name=\"arrow-triangle\" />\n        </ArrowWrapper>\n      </SelectorWrapper>\n      {isOpen ? (\n        <DropDownList>\n          {/*<ItemRow*/}\n          {/*  key={itemCluster}*/}\n          {/*  isSelected={cluster === itemCluster}*/}\n          {/*  cluster={itemCluster}*/}\n          {/*  onItemClick={handleItemClick}*/}\n          {/*>*/}\n          {/*  {itemCluster}*/}\n          {/*</ItemRow>*/}\n        </DropDownList>\n      ) : undefined}\n    </Wrapper>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { FundRow } from './FundRow';\nimport { Column } from './common/Column';\nimport { Selector } from './Selector';\n\nconst Wrapper = styled.div``;\n\nconst Title = styled.div`\n  margin-bottom: 38px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 100%;\n`;\n\nconst ColumnsHeader = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 36px;\n  padding: 0 26px;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nconst ColumnName = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 140%;\n\n  &.since {\n    color: #000000;\n\n    cursor: pointer;\n  }\n`;\n\nconst FundList = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 24px;\n\n  margin-top: 20px;\n`;\n\ninterface Props {}\n\nexport const Funds: FC<Props & HTMLAttributes<HTMLDivElement>> = ({\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      <Title>DTFs</Title>\n      <ColumnsHeader>\n        <Column className={classNames({ name: true })}>\n          <ColumnName>Name</ColumnName>\n        </Column>\n        <Column className={classNames({ marketCap: true })}>\n          <ColumnName>Market Cap</ColumnName>\n        </Column>\n        <Column className={classNames({ price: true })}>\n          <ColumnName>Price</ColumnName>\n        </Column>\n        <Column className={classNames({ since: true })}>\n          <ColumnName className={classNames({ since: true })}>\n            <Selector>Since inception</Selector>\n          </ColumnName>\n        </Column>\n        <Column className={classNames({ balance: true })}>\n          <ColumnName>Balance</ColumnName>\n        </Column>\n      </ColumnsHeader>\n      <FundList>\n        <FundRow />\n        <FundRow />\n        <FundRow />\n        <FundRow />\n        <FundRow />\n        <FundRow />\n      </FundList>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { styled } from '@linaria/react';\nimport { Header } from 'components/common/Header';\nimport { MainContainer } from 'components/common/MainContainer';\nimport { Funds } from './Funds';\n\nconst Wrapper = styled.div`\n  min-height: 100%;\n`;\n\nconst Container = styled(MainContainer)`\n  display: flex;\n  flex-direction: column;\n\n  margin: 100px auto;\n`;\n\nconst Title = styled.h1`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 62px;\n  line-height: 120%;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 120%;\n\n  text-align: center;\n`;\n\nconst FundsStyled = styled(Funds)`\n  margin-top: 85px;\n`;\n\nexport const Home = () => {\n  return (\n    <Wrapper>\n      <Header />\n      <Container>\n        <Title>Non-custodial DEX Traded Funds(DTFs)</Title>\n        <Description>Build on top of Solana and Serum</Description>\n        <FundsStyled />\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Redirect } from 'react-router';\nimport { renderRoutes, RouteConfig } from 'react-router-config';\n\nimport { useStore } from 'effector-react';\n\nimport { Home } from 'pages/home';\n// import { NotFound } from 'pages/notFound';\nimport { $connected } from 'models/wallet';\n\ntype RouteConfigCustom = RouteConfig & { needAuth?: boolean };\n\nexport const makeRoutes = (isAuth: boolean): RouteConfigCustom[] =>\n  ([\n    {\n      path: '/',\n      exact: true,\n      component: Home,\n    },\n    {\n      path: '*',\n      component: () => <Redirect to=\"/\" />,\n    },\n    // {\n    //   path: '*',\n    //   component: NotFound,\n    // },\n  ] as RouteConfigCustom[]).map((route) => {\n    if (route.needAuth && route.needAuth !== isAuth) {\n      route.component = () => <Redirect to=\"/\" />;\n      return route;\n    }\n\n    return route;\n  });\n\nexport const Pages = () => {\n  // TODO: Cannot update a component (`Pages`) while rendering a different component\n  const connected = useStore($connected);\n\n  return useMemo(() => renderRoutes(makeRoutes(connected)), [connected]);\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  createRef,\n  FC,\n  lazy,\n  LazyExoticComponent,\n  RefObject,\n  Suspense,\n  useState,\n} from 'react';\n\nimport { styled } from '@linaria/react';\nimport { last } from 'ramda';\nimport { useStore } from 'effector-react';\nimport { ModalComponentType, ModalState } from 'models/modals/types';\nimport { $modals, closeModalFx } from 'models/modals';\nimport { MODAL_INVEST, MODAL_WITHDRAW } from './constants';\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 30;\n\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst ModalContainer = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n\n  overflow-y: auto;\n  overscroll-behavior: none;\n\n  /* Above background */\n  &:last-child {\n    z-index: 2;\n  }\n`;\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100%;\n  padding: 10px 0;\n`;\n\nconst ModalBackground = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 2;\n\n  background-color: rgba(0, 0, 0, 0.6);\n\n  user-select: none;\n`;\n\nconst modalsMap = new Map<string, LazyExoticComponent<any>>([\n  [MODAL_INVEST, lazy(() => import('components/modals/Invest'))],\n  [MODAL_WITHDRAW, lazy(() => import('components/modals/Withdraw'))],\n]);\n\nexport const ModalManager: FC = () => {\n  const [modalsRefs, setModalsRefs] = useState<{\n    [modalId: string]: RefObject<ModalComponentType>;\n  }>({});\n  const modals = useStore($modals);\n\n  const closeTopModal = async () => {\n    const modal = last(modals);\n    if (!modal) {\n      return;\n    }\n\n    const { modalId } = modal;\n\n    const modalRef = modalsRefs[modalId];\n    if (modalRef.current?.canClose && !(await modalRef.current.canClose())) {\n      return;\n    }\n\n    closeModalFx({ modalId });\n  };\n\n  const handleWrapperClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // handle click only on element\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    closeTopModal();\n  };\n\n  const getReadyDialogs = () => {\n    const dialogs: (ModalState & {\n      ModalComponent: LazyExoticComponent<any>;\n    })[] = [];\n\n    for (const { modalType, modalId, props } of modals) {\n      const ModalComponent = modalsMap.get(modalType);\n      if (ModalComponent) {\n        dialogs.push({\n          modalType,\n          modalId,\n          props,\n          ModalComponent,\n        });\n      }\n    }\n\n    return dialogs;\n  };\n\n  const dialogsInfo = getReadyDialogs();\n\n  const dialogs = dialogsInfo.map(({ modalId, props, ModalComponent }) => {\n    let modalRef = modalsRefs[modalId];\n\n    if (!modalRef) {\n      modalRef = createRef();\n      setModalsRefs((state) => ({\n        ...state,\n        [modalId]: modalRef,\n      }));\n    }\n\n    return (\n      <Suspense fallback={null} key={modalId}>\n        <ModalContainer>\n          <ModalWrapper onClick={handleWrapperClick}>\n            <ModalComponent\n              {...props}\n              modalId={modalId}\n              modalRef={modalRef}\n              close={(result: any) => closeModalFx({ modalId, result })}\n            />\n          </ModalWrapper>\n        </ModalContainer>\n      </Suspense>\n    );\n  });\n\n  if (dialogs.length > 0) {\n    return (\n      <Wrapper>\n        <ModalBackground />\n        {dialogs}\n      </Wrapper>\n    );\n  }\n\n  return null;\n};\n","import React from 'react';\nimport { Router } from 'react-router';\nimport { useGate } from 'effector-react';\n\nimport { AppGate } from 'models/app';\nimport { history } from 'lib/routing';\nimport { Pages } from './routes';\nimport { ModalManager } from './components/common/ModalManager';\n\nexport const App: React.FC = () => {\n  useGate(AppGate);\n\n  return (\n    <>\n      <Router history={history}>\n        <Pages />\n      </Router>\n      <ModalManager />\n    </>\n  );\n};\n","import { app } from './index';\n\napp.onCreateEffect((newEffect) => {\n  newEffect.failData.watch((payload) => console.error(payload));\n});\n","import * as WalletAPI from 'api/wallet';\nimport { WalletEvent } from 'api/wallet/Wallet';\n\nimport {\n  $cluster,\n  $connected,\n  $type,\n  $wallet,\n  connectFx,\n  disconnectFx,\n} from '.';\n\nconnectFx.use(async () => {\n  const cluster = $cluster.getState();\n  const type = $type.getState();\n  const wallet = await WalletAPI.connect(cluster, type);\n\n  wallet.on(WalletEvent.DISCONNECT, () => {\n    disconnectFx();\n    console.error('Wallet disconnected');\n  });\n\n  wallet.on(WalletEvent.CONFIRMED, ({ transactionSignature }) =>\n    console.info(`Confirmed: ${transactionSignature}`),\n  );\n\n  console.info('Wallet connected');\n\n  return wallet.pubkey.toBase58();\n});\n\ndisconnectFx.use(() => {\n  WalletAPI.disconnect();\n  console.error('Wallet disconnected');\n});\n\n$connected.on(connectFx.done, () => true).on(disconnectFx, () => false);\n\n$wallet.on(connectFx.doneData, (_, wallet) => wallet);\n","import { closeModal, $modals, closeModalFx, openModalFx, openModal } from '.';\n\nconst promises = new Map();\nlet modalId = 0;\n\ncloseModalFx.use(({ modalId, result }): void => {\n  if (!modalId) {\n    throw new Error('Trying to hide modal without modalId');\n  }\n\n  const dialogInfo = promises.get(modalId);\n\n  if (dialogInfo) {\n    dialogInfo.resolve(result);\n    promises.delete(modalId);\n  }\n\n  closeModal({ modalId });\n});\n\nopenModalFx.use(\n  ({ modalType, props }): Promise<unknown> => {\n    const modals = $modals.getState();\n\n    if (modals.some((modal) => modal.modalType === modalType)) {\n      // TODO: custom type of Error\n      throw new Error(`Dublicate of modal ${modalType}`);\n    }\n\n    modalId = ++modalId;\n\n    openModal({ modalType, modalId, props });\n\n    const promise = new Promise((resolve) => {\n      promises.set(modalId, {\n        modalId,\n        resolve,\n      });\n    });\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    promise.modalId = modalId;\n\n    return promise;\n  },\n);\n\n$modals\n  .on(closeModal, (state, payload) =>\n    state.filter((dialog) => dialog.modalId !== payload.modalId),\n  )\n  .on(openModal, (state, payload) => state.concat(payload));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createInspector } from 'effector-logger/inspector';\n\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport './models/init';\nimport { css } from '@linaria/core';\nimport { ress } from './styles/ress';\nimport { fonts } from 'styles/fonts';\n\ncreateInspector();\n\nexport const globals = css`\n  :global() {\n    ${ress}\n    ${fonts}\n    html,\n    body,\n    #root {\n      min-height: 0;\n    }\n\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n        'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n        'Helvetica Neue', sans-serif;\n      font-feature-settings: 'kern';\n      text-rendering: optimizeLegibility;\n      -webkit-font-smoothing: antialiased;\n    }\n\n    #root {\n      background: #fbfbfd;\n\n      padding-bottom: 50px;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport avatarImg from './avatar.png';\n\nconst Wrapper = styled.div<{\n  src?: string;\n  size?: string | number;\n  circle?: boolean;\n}>`\n  width: ${(props) => props.size || '32'}px;\n  height: ${(props) => props.size || '32'}px;\n\n  background-color: #f6f6f8;\n  background-image: ${(props) => (props.src ? `url(\"${props.src}\")` : 'none')};\n  background-size: ${(props) => props.size || '32'}px;\n  background-repeat: no-repeat;\n  background-position: center;\n  border-radius: 50%;\n\n  &:not([src]) {\n    background-image: url('${avatarImg}');\n    background-size: 17px 15px;\n  }\n`;\n\ninterface Props {\n  // TODO: src is temp, use symbol and find icon\n  src?: string;\n  symbol?: string;\n  size?: string | number;\n}\n\nexport const Avatar: FC<Props> = ({ src, symbol, size }) => {\n  return <Wrapper src={src} size={size} />;\n};\n","import React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nconst ButtonElement = styled.button`\n  height: 46px;\n  padding: 0 40px;\n\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 100%;\n  white-space: nowrap;\n\n  border-radius: 12px;\n  outline: 0;\n\n  &.primary {\n    color: #fff;\n\n    background: #5887ff;\n  }\n\n  &.hollow {\n    color: #5887ff;\n\n    background: #ffffff;\n  }\n\n  &.full {\n    width: 100%;\n  }\n\n  &:disabled {\n    color: #fff;\n\n    background: #a3a5ba;\n  }\n`;\n\ninterface Props {\n  primary?: boolean;\n  hollow?: boolean;\n  full?: boolean;\n}\n\nexport const Button: FC<Props & ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  onClick,\n  primary,\n  hollow,\n  full,\n  disabled,\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <ButtonElement\n      disabled={disabled}\n      onClick={onClick}\n      style={style}\n      className={classNames(className, { primary, hollow, full })}\n    >\n      {children}\n    </ButtonElement>\n  );\n};\n"],"sourceRoot":""}