{"version":3,"sources":["components/common/Modal/Modal.tsx","components/ui/Input/Input.tsx","components/ui/Slider/Slider.tsx","components/modals/Withdraw/Withdraw.tsx"],"names":["Wrapper","Header","Title","Description","CloseWrapper","Content","Modal","className","title","description","close","onClick","children","Somefix","WrapperLabel","InputElement","Input","useState","style","classNames","isFocus","left","placeholder","value","onChange","onFocus","setIsFocus","onBlur","right","Progress","HandleSlot","HandleWrapper","Handle","HandleValue","rootRef","createRef","isListenerActive","e","onMouseDown","window","onTouchStart","onMove","onMovingEnd","onVisibilityChange","document","componentWillUnmount","this","removeListeners","calculateValue","clientX","max","box","current","unbound","Math","min","resetMoving","render","disabled","percent","Number","props","undefined","width","ref","defaultProps","WrapperModal","InvestWrapper","FundInfoWrapper","FundName","InputsWrapper","AvailableBalanceWrapper","AvailableBalance","TransactionInfoWrapper","InfoLine","InfoLeft","InfoRight","Footer","InvestButton","Withdraw","size","prefix","postfix","nextValue","setPercentage","full","primary"],"mappings":"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","file":"static/js/3.73518b39.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport closeImg from './close.png';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #fff;\n  border-radius: 20px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 20px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Title = styled.div`\n  color: #000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 100%;\n`;\n\nconst Description = styled.div`\n  margin-top: 10px;\n\n  color: rgba(0, 0, 0, 0.5);\n  font-size: 14px;\n  line-height: 17px;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8 url('${closeImg}') no-repeat 50% 50%;\n  background-size: 16px;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div``;\n\ninterface Props {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n}\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  close,\n  children,\n  className,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? <CloseWrapper onClick={close} /> : undefined}\n      </Header>\n      {children ? <Content>{children}</Content> : undefined}\n    </Wrapper>\n  );\n};\n","import React, { FC, InputHTMLAttributes, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nconst Somefix = styled.div`\n  min-width: 70px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n\n  &.left {\n    text-align: left;\n  }\n\n  &.right {\n    text-align: right;\n  }\n`;\n\nconst WrapperLabel = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  height: 56px;\n  padding: 0 20px;\n\n  background: #fbfbfd;\n  border-radius: 12px;\n\n  &.isFocus {\n    background: #fbfbfd;\n    border: 1px solid #5887ff;\n\n    ${Somefix} {\n      color: #000000;\n    }\n  }\n`;\n\nconst InputElement = styled.input`\n  height: 100%;\n  width: auto;\n  padding: 0 20px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 100%;\n  text-align: center;\n\n  outline: 0;\n\n  &::placeholder {\n    color: #a3a5ba;\n  }\n\n  &:focus {\n    color: #5887ff;\n  }\n`;\n\ninterface Props {\n  prefix: string;\n  postfix: string;\n}\n\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\n  prefix,\n  postfix,\n  placeholder,\n  value,\n  onChange,\n  style,\n  className,\n}) => {\n  const [isFocus, setIsFocus] = useState(false);\n\n  const handleFocus = () => {\n    setIsFocus(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocus(false);\n  };\n\n  return (\n    <WrapperLabel style={style} className={classNames(className, { isFocus })}>\n      <Somefix className={classNames({ left: true })}>{prefix}</Somefix>\n      <InputElement\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n      <Somefix className={classNames({ right: true })}>{postfix}</Somefix>\n    </WrapperLabel>\n  );\n};\n","import React, { PureComponent, createRef } from 'react';\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport hamburgerImg from './hamburger.png';\n\nconst Progress = styled.div`\n  position: absolute;\n\n  top: 15px;\n  left: 0;\n\n  height: 4px;\n\n  border-radius: 2px;\n  background: #5887ff;\n`;\n\nconst HandleSlot = styled.div`\n  position: relative;\n\n  margin: 0 11px;\n`;\n\nconst HandleWrapper = styled.div`\n  position: absolute;\n\n  padding: 5px;\n  margin: -5px 0 0 -16px;\n`;\n\nconst Handle = styled.div`\n  width: 32px;\n  height: 32px;\n\n  color: #fff;\n\n  background: #ffffff url('${hamburgerImg}') no-repeat 50% 50%;\n  background-size: 12px 7px;\n  border: 1px solid rgba(163, 165, 186, 0.5);\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n\n  cursor: pointer;\n`;\n\nconst HandleValue = styled.div`\n  width: 45px;\n  margin-left: -5px;\n  margin-top: 8px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n  text-align: center;\n`;\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  height: 64px;\n  user-select: none;\n  cursor: pointer;\n  -webkit-tap-highlight-color: transparent;\n\n  .disabled {\n    cursor: default;\n\n    ${Progress} {\n      background: #8e8e8e;\n    }\n\n    ${Handle} {\n      border-color: #8e8e8e;\n      background: #8e8e8e;\n      cursor: default;\n    }\n  }\n\n  &:before {\n    position: absolute;\n    content: '';\n\n    top: 15px;\n    right: 0;\n    left: 0;\n\n    height: 4px;\n\n    border-radius: 2px;\n    background: #a3a5ba;\n  }\n`;\n\ninterface Props {\n  value: number | string;\n  min: number;\n  max: number;\n  disabled?: boolean;\n  onChange: (nextValue: number) => void;\n}\n\nexport class Slider extends PureComponent<Props> {\n  static defaultProps = {\n    value: 0,\n    min: 0,\n    max: 100,\n  };\n\n  rootRef = createRef<HTMLDivElement>();\n\n  isListenerActive = false;\n\n  componentWillUnmount() {\n    this.removeListeners();\n  }\n\n  removeListeners() {\n    if (this.isListenerActive) {\n      this.isListenerActive = false;\n      window.removeEventListener('mousemove', this.onMove);\n      window.removeEventListener('mouseup', this.onMovingEnd);\n      window.removeEventListener('touchmove', this.onMove);\n      window.removeEventListener('touchend', this.onMovingEnd);\n      window.removeEventListener('visibilitychange', this.onVisibilityChange);\n    }\n  }\n\n  calculateValue(\n    e:\n      | React.MouseEvent<HTMLDivElement>\n      | React.TouchEvent<HTMLDivElement>\n      | MouseEvent\n      | TouchEvent,\n  ) {\n    if (!this.rootRef.current) {\n      return 0;\n    }\n\n    let { clientX } = e as React.MouseEvent<HTMLDivElement>;\n    if (!clientX && (e as TouchEvent).changedTouches) {\n      clientX = (e as TouchEvent).changedTouches[0].clientX;\n    }\n\n    const { min, max } = this.props;\n    const box = this.rootRef.current.getBoundingClientRect();\n    const unbound = Math.round(\n      min + ((max - min) * (clientX - box.left)) / box.width,\n    );\n\n    return Math.min(max, Math.max(min, unbound));\n  }\n\n  resetMoving() {\n    this.removeListeners();\n  }\n\n  onClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n\n    this.setState({\n      value: this.calculateValue(e),\n    });\n  };\n\n  onMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n\n    this.setState({\n      value: this.calculateValue(e),\n    });\n\n    if (!this.isListenerActive) {\n      this.isListenerActive = true;\n      window.addEventListener('mousemove', this.onMove);\n      window.addEventListener('mouseup', this.onMovingEnd);\n      window.addEventListener('visibilitychange', this.onVisibilityChange);\n    }\n  };\n\n  onTouchStart = (e: React.TouchEvent<HTMLDivElement>) => {\n    e.preventDefault();\n\n    this.setState({\n      value: this.calculateValue(e),\n    });\n\n    if (!this.isListenerActive) {\n      this.isListenerActive = true;\n      window.addEventListener('touchmove', this.onMove);\n      window.addEventListener('touchend', this.onMovingEnd);\n      window.addEventListener('visibilitychange', this.onVisibilityChange);\n    }\n  };\n\n  onMove = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n\n    this.props.onChange(this.calculateValue(e));\n  };\n\n  onMovingEnd = (e: MouseEvent | TouchEvent) => {\n    e.preventDefault();\n\n    this.resetMoving();\n    this.props.onChange(this.calculateValue(e));\n  };\n\n  onVisibilityChange = () => {\n    if (document.hidden) {\n      this.resetMoving();\n    }\n  };\n\n  render() {\n    const { min, max, disabled } = this.props;\n    const value = Number(this.props.value);\n    const percent = (100 * (value - min)) / (max - min) || 0;\n\n    return (\n      <Wrapper\n        onClick={disabled ? undefined : this.onClick}\n        onMouseDown={disabled ? undefined : this.onMouseDown}\n        onTouchStart={disabled ? undefined : this.onTouchStart}\n        className={classNames({ disabled })}\n      >\n        <Progress style={{ width: `${percent}%` }} />\n        <HandleSlot ref={this.rootRef}>\n          <HandleWrapper style={{ left: `${percent}%` }}>\n            <Handle />\n            <HandleValue>{percent}%</HandleValue>\n          </HandleWrapper>\n        </HandleSlot>\n      </Wrapper>\n    );\n  }\n}\n","import React, { FC, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { Modal } from 'components/common/Modal';\nimport { Button } from 'components/ui/Button';\nimport { Avatar } from 'components/common/Avatar';\nimport { Input } from 'components/ui/Input';\nimport { Slider } from 'components/ui/Slider';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 512px;\n`;\n\nconst Wrapper = styled.div`\n  & > :not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst InvestWrapper = styled.div`\n  padding: 0 20px;\n`;\n\nconst FundInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 32px 0;\n`;\n\nconst FundName = styled.div`\n  margin-top: 8px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst InputsWrapper = styled.div`\n  margin-bottom: 32px;\n`;\n\nconst AvailableBalanceWrapper = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  margin: 16px 0 25px;\n`;\n\nconst AvailableBalance = styled.div`\n  color: #5887ff;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n\n  cursor: pointer;\n`;\n\nconst TransactionInfoWrapper = styled.div`\n  padding: 20px;\n`;\n\nconst InfoLine = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst InfoLeft = styled.div`\n  color: #a3a5ba;\n`;\n\nconst InfoRight = styled.div`\n  color: #000000;\n`;\n\nconst Footer = styled.div`\n  padding: 24px 20px;\n`;\n\nconst InvestButton = styled(Button)`\n  height: 56px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\ninterface Props {\n  close: () => void;\n}\n\nexport const Withdraw: FC<Props> = ({ close }) => {\n  const [percentage, setPercentage] = useState(0);\n\n  const handlePercentageChange = (nextValue: number) => {\n    setPercentage(nextValue);\n  };\n\n  return (\n    <WrapperModal title=\"Withdraw\" close={close}>\n      <Wrapper>\n        <InvestWrapper>\n          <FundInfoWrapper>\n            <Avatar size={64} />\n            <FundName>ABDFS</FundName>\n          </FundInfoWrapper>\n          <InputsWrapper>\n            <Input prefix=\"Amount\" postfix=\"ABDFS\" placeholder=\"0.0\" />\n            <AvailableBalanceWrapper>\n              <AvailableBalance>\n                Available balance: 21.1507 ABDFS\n              </AvailableBalance>\n            </AvailableBalanceWrapper>\n            <Slider\n              value={percentage}\n              min={0}\n              max={100}\n              onChange={handlePercentageChange}\n            />\n          </InputsWrapper>\n        </InvestWrapper>\n        <TransactionInfoWrapper>\n          <InfoLine>\n            <InfoLeft>You’ll receive:</InfoLeft>\n            <InfoRight>21.1507 ABDFS</InfoRight>\n          </InfoLine>\n          <InfoLine>\n            <InfoLeft>Transaction Fee:</InfoLeft>\n            <InfoRight>0.00012 SOL</InfoRight>\n          </InfoLine>\n        </TransactionInfoWrapper>\n        <Footer>\n          <InvestButton full primary>\n            Withdraw now\n          </InvestButton>\n        </Footer>\n      </Wrapper>\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}