{"version":3,"sources":["models/connection/effects/findFundFx.ts","models/connection/effects/findFundsFx.ts","models/connection/structs.ts","models/app/index.ts","api/wallet/Wallet.ts","lib/routing/index.ts","api/wallet/index.ts","api/wallet/SolletWallet.ts","models/wallet/index.ts","components/common/Header/model.ts","components/common/Header/NavMenu/NavMenu.tsx","components/common/Header/Header.tsx","components/common/MainContainer/MainContainer.tsx","models/modals/index.ts","components/common/ModalManager/constants.ts","pages/home/Funds/common/Column/Column.ts","pages/home/Funds/FundRow/FundRow.tsx","components/ui/Icon/assets/arrow-triangle-icon.svg","components/ui/Icon/assets/checkmark-icon.svg","components/ui/Icon/Icon.tsx","pages/home/Funds/Selector/Selector.tsx","pages/home/Funds/model.ts","pages/home/Funds/Funds.tsx","pages/home/Home.tsx","routes.tsx","components/common/ModalManager/ModalManager.tsx","App.tsx","models/app/init.ts","models/wallet/init.ts","models/modals/init.ts","index.tsx","reportWebVitals.ts","api/connection/index.ts","api/connection/utils/retryableProxy.ts","config/index.ts","models/connection/index.ts","utils/common.ts","components/ui/Button/Button.tsx","../../js/lib/fund.js","components/common/Avatar/Avatar.tsx"],"names":["findFundFx","use","a","connection","getConnection","pubkey","PublicKey","getAccountInfo","result","Error","parsedData","Fund","decodePoolState","Buffer","from","data","account","executable","owner","lamports","findFundsFx","filters","dataSize","_rpcRequest","DTF_PROGRAM_ID","toBase58","commitment","encoding","unsafeRes","res","GetProgramAccountsRpcResult","error","message","assert","map","filter","complement","isNil","AccountInfoResult","struct","rentEpoch","ProgramAccountInfoResult","resultDescription","jsonRpcVersion","literal","union","jsonrpc","id","jsonRpcResult","array","app","createDomain","AppGate","createGate","WalletEvent","history","createBrowserHistory","basename","window","location","pathname","wallet","WalletType","Wallet","network","transaction","this","signTransaction","signedTransaction","emit","SIGNED","EventEmitter","DEFAULT_PROVIDER","SolletWallet","provider","solletWallet","SolletWalletAdapter","on","CONNECT","DISCONNECT","connect","publicKey","disconnect","postTransactionSleepMS","createWallet","type","cluster","getNetwork","SOLLET","BONFIDA","newWallet","Promise","resolve","DEFAULT_COMMITMENT","connectFx","createEffect","disconnectFx","$cluster","createStore","$type","createEvent","$connected","$wallet","connectClicked","forward","to","Wrapper","NavMenuLink","NavMenu","Container","Left","LogoLink","ByA","Right","Header","connected","useStore","href","target","rel","primary","onClick","MainContainer","className","style","$modals","closeModalFx","closeModal","openModalFx","openModal","MODAL_INVEST","MODAL_WITHDRAW","Column","TopWrapper","InfoWrapper","FundName","FundDate","ColumnValue","AdditionalInfo","ColumnButtons","ButtonStyled","BottomWrapper","TokenSharesRow","TokenShare","TokenName","TokenShareValue","FundRow","fund","tokens","useMemo","fundState","assetWights","mintAddress","assets","weight","modalType","classNames","name","marketCap","price","since","profit","balance","disabled","e","tokenWeight","tokenMeta","TOKENS","token","key","size","src","shortAddress","iconsMap","Map","arrowTriangle","checkmark","Icon","height","width","props","validProps","Object","keys","forEach","prop","isPropValid","icon","get","viewBox","xlinkHref","SelectorWrapper","ArrowWrapper","ArrowIcon","DropDownList","Selector","children","selectorRef","useRef","useState","handleAwayClick","setIsOpen","useEffect","ref","isOpen","FundsGate","$funds","doneData","state","newFund","find","equals","open","Title","ColumnsHeader","ColumnName","FundList","Funds","useGate","funds","Description","FundsStyled","Home","Pages","renderRoutes","isAuth","path","exact","component","route","needAuth","ModalContainer","ModalWrapper","ModalBackground","modalsMap","lazy","ModalManager","modals","closeTopModal","modal","last","modalId","modalRef","modalsRefs","handleWrapperClick","dialogs","ModalComponent","getReadyDialogs","createRef","setModalsRefs","fallback","close","App","onCreateEffect","newEffect","failData","watch","payload","console","getState","WalletAPI","CONFIRMED","transactionSignature","info","done","_","promises","dialogInfo","delete","some","promise","set","dialog","concat","createInspector","onPerfEntry","globals","ReactDOM","document","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","currentCluster","defaultRetryOptions","count","intervalMS","backoutMultiplier","defaultCommitment","createConnection","memoizeWith","identity","Connection","fnName","fn","retryOptions","options","mergeLeft","retryReducer","thisArg","argArray","previousValue","currentValue","currentIndex","call","apply","catch","sleepMs","log","sleep","Proxy","Array","reduce","retryableProxy","clusterApiUrl","confirmTransaction","signature","confirmViaSocket","onSignature","signatureResult","confirmViaHttp","value","race","process","Number","POST_TRANSACTION_SLEEP_MS","TOKENS_ORIGINAL","devnet","tokenSymbol","tokenName","website","ms","setTimeout","address","slice","ButtonElement","Button","hollow","full","__createBinding","create","o","m","k","k2","undefined","defineProperty","enumerable","__setModuleDefault","v","__importStar","mod","__esModule","prototype","hasOwnProperty","__importDefault","exports","schema","PoolState","FundState","ParamDesc","AssetInfo","PoolRequest","InitializePoolRequest","InitializeFundData","PoolRequestInner","bn_js_1","require","borsh","web3_js_1","Assignable","properties","PubKey","OptionAddress","length","PoolRequestTag","default","kind","fields","fundProgramId","assign","fundAccount","fundTokenMint","fundVaultAccounts","fundVaultAuthority","lqdFeeAccount","initializerFeeAccount","sysvar","fundAdminAccount","initialSupplyFundTokenAccount","fundBasicTokenVaultAccount","tokenProgramId","nonce","poolName","feeRate","assetWeights","initialSupply","slippageDivider","isSigner","isWritable","acc","initializeFundData","serializedInitializeFundData","serialize","initializePoolRequest","assetsLength","customData","poolRequest","tag","index","inner","serializedData","TransactionInstruction","programId","buffer","byteOffset","byteLength","poolState","deserialize","customState","Avatar"],"mappings":"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","file":"static/js/main.5dd45230.chunk.js","sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { getConnection } from 'api/connection';\nimport { findFundFx } from '..';\nimport { Fund } from '../../../../../js/lib/fund';\n\nfindFundFx.use(async () => {\n  const connection = getConnection();\n  const pubkey = new PublicKey('t72redTRJkPtUmTWWvPyjnkFKGVrHakv3DBQTheY4oD');\n\n  const result = await connection.getAccountInfo(pubkey);\n\n  if (!result) {\n    throw new Error(`fund doesn't exists`);\n  }\n\n  const parsedData = Fund.decodePoolState(Buffer.from(result.data));\n\n  return {\n    pubkey,\n    account: {\n      executable: result.executable,\n      owner: result.owner,\n      lamports: result.lamports,\n      data: parsedData,\n    },\n  };\n});\n","import assert from 'assert';\nimport { PublicKey } from '@solana/web3.js';\nimport { complement, isNil } from 'ramda';\nimport { getConnection } from 'api/connection';\nimport { DTF_PROGRAM_ID } from 'config';\nimport { GetProgramAccountsRpcResult } from '../structs';\nimport { findFundsFx } from '..';\nimport { Fund } from '../../../../../js/lib/fund';\n\nfindFundsFx.use(async () => {\n  const connection = getConnection();\n\n  const filters = [\n    {\n      dataSize: 751,\n    },\n  ];\n\n  const unsafeRes = await connection._rpcRequest('getProgramAccounts', [\n    DTF_PROGRAM_ID.toBase58(),\n    {\n      commitment: connection.commitment,\n      filters,\n      encoding: 'base64',\n    },\n  ]);\n\n  const res = GetProgramAccountsRpcResult(unsafeRes);\n  if (res.error) {\n    throw new Error(\n      'failed to get accounts owned by program ' +\n        DTF_PROGRAM_ID.toBase58() +\n        ': ' +\n        res.error.message,\n    );\n  }\n\n  const { result } = res;\n  assert(typeof result !== 'undefined');\n\n  return result\n    .map((result: any) => {\n      assert(result.account.data[1] === 'base64');\n\n      const parsedData = Fund.decodePoolState(\n        Buffer.from(result.account.data[0], 'base64'),\n      );\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: parsedData,\n        },\n      };\n    })\n    .filter(complement(isNil));\n});\n","import { struct } from 'superstruct';\n\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nexport const GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n","import { createDomain } from 'effector';\nimport { createGate } from 'effector-react';\n\nexport const app = createDomain();\n\nexport const AppGate = createGate();\n","import { PublicKey, Transaction } from '@solana/web3.js';\nimport EventEmitter from 'eventemitter3';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletEvent {\n  CONNECT = 'connect',\n  DISCONNECT = 'disconnect',\n  SIGNED = 'signed',\n  CONFIRMED = 'confirmed',\n}\n\n/**\n * Abstract wallet implementation. Any wallet connection,\n * e.g. browser extension, hardware wallet, web wallet etc,\n * is a separate implementation of this.\n */\nexport abstract class Wallet extends EventEmitter {\n  private network: string;\n\n  protected constructor(network: string) {\n    super();\n    this.network = network;\n  }\n\n  abstract get pubkey(): PublicKey;\n\n  abstract disconnect(): void;\n\n  /**\n   * Sign the transaction, and emit a \"signed\" event\n   * @param transaction\n   */\n  async sign(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = await this.signTransaction(transaction);\n    this.emit(WalletEvent.SIGNED, { transaction: signedTransaction });\n\n    return signedTransaction;\n  }\n\n  /**\n   * Delegate to the underlying implementation to sign the transaction\n   * @param transaction\n   * @protected\n   */\n  protected abstract signTransaction(transaction: Transaction): Promise<Transaction>;\n}\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory({\n  basename: window.location.pathname,\n});\n","import {\n  Account,\n  Cluster,\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionInstructionCtorFields,\n} from '@solana/web3.js';\n\nimport { postTransactionSleepMS } from 'config';\nimport { sleep } from 'utils/common';\n\nimport {\n  confirmTransaction,\n  DEFAULT_COMMITMENT,\n  getConnection,\n  getNetwork,\n} from '../connection';\nimport { SolletWallet } from './SolletWallet';\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst POST_TRANSACTION_SLEEP_MS = postTransactionSleepMS || 500;\n\n/**\n * API for connecting to and interacting with a wallet\n */\n\n// singleton wallet for the app.\n// A user can be connected to only one wallet at a time.\nlet wallet: Wallet | null;\nlet connection: Connection | null;\n\nconst ERROR_CONNECT_FIRST = 'Connect first';\n\n// eslint-disable-next-line no-shadow\nexport enum WalletType {\n  MANUAL,\n  SOLLET,\n  BONFIDA,\n  LOCAL,\n}\n\nconst createWallet = (type: WalletType, cluster: Cluster): Wallet => {\n  const network = getNetwork(cluster);\n  switch (type) {\n    case WalletType.SOLLET:\n      return new SolletWallet(network);\n    case WalletType.BONFIDA:\n      return new SolletWallet(network, 'https://bonfida.com/wallet');\n    default:\n      return new SolletWallet(network);\n  }\n};\n\nexport const connect = async (\n  cluster: Cluster,\n  type: WalletType,\n): Promise<Wallet> => {\n  const newWallet = createWallet(type, cluster);\n\n  // assign the singleton wallet.\n  // Using a separate variable to simplify the type definitions\n  wallet = newWallet;\n  connection = getConnection(cluster);\n\n  // connect is done once the wallet reports that it is connected.\n  return new Promise((resolve) => {\n    newWallet.on(WalletEvent.CONNECT, () => resolve(newWallet));\n  });\n};\n\nexport const disconnect = (): void => wallet?.disconnect();\n\nexport const makeTransaction = async (\n  instructions: (TransactionInstruction | TransactionInstructionCtorFields)[],\n  signers: Account[] = [],\n): Promise<Transaction> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  const { blockhash: recentBlockhash } = await connection.getRecentBlockhash();\n\n  const signatures = [{ publicKey: wallet.pubkey }, ...signers];\n  const transaction = new Transaction({\n    recentBlockhash,\n    signatures,\n  });\n  transaction.add(...instructions);\n\n  // if there are any cosigners (other than the current wallet)\n  // sign the transaction\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  return transaction;\n};\n\ninterface SendOptions {\n  commitment: Commitment;\n  preflightCommitment: Commitment;\n}\n\nconst defaultSendOptions = {\n  commitment: DEFAULT_COMMITMENT,\n  preflightCommitment: DEFAULT_COMMITMENT,\n};\n\nasync function awaitConfirmation(\n  signature: string,\n  commitment: 'max' | 'recent' | 'root' | 'single' | 'singleGossip' | undefined,\n) {\n  console.log(`Submitted transaction ${signature}, awaiting confirmation`);\n  await confirmTransaction(signature, commitment);\n  console.log(`Transaction ${signature} confirmed`);\n\n  if (wallet) {\n    wallet.emit(WalletEvent.CONFIRMED, { transactionSignature: signature });\n  }\n\n  // workaround for a known solana web3 bug where\n  // the state obtained from the http endpoint and the websocket are out of sync\n  await sleep(POST_TRANSACTION_SLEEP_MS);\n  return signature;\n}\n\nexport const sendTransaction = async (\n  transaction: Transaction,\n  {\n    commitment = defaultSendOptions.commitment,\n    preflightCommitment = defaultSendOptions.preflightCommitment,\n  }: Partial<SendOptions> = defaultSendOptions,\n): Promise<string> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  console.log('Sending signature request to wallet');\n  const signed = await wallet.sign(transaction);\n  console.log('Got signature, submitting transaction');\n  const signature = await connection.sendRawTransaction(signed.serialize(), {\n    preflightCommitment,\n  });\n\n  return awaitConfirmation(signature, commitment);\n};\n\nexport const getWallet = (): Wallet => {\n  if (!wallet || !connection) {\n    throw new Error('notification.error.noWallet');\n  }\n\n  return wallet;\n};\n\nexport const getBalance = (publicKey: PublicKey): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getBalance(publicKey);\n};\n\nexport const getMinimumBalanceForRentExemption = (\n  length: number,\n): Promise<number> => {\n  if (!wallet || !connection) {\n    throw new Error(ERROR_CONNECT_FIRST);\n  }\n\n  return connection.getMinimumBalanceForRentExemption(length);\n};\n","import SolletWalletAdapter from '@project-serum/sol-wallet-adapter';\nimport { PublicKey, Transaction } from '@solana/web3.js';\n\nimport { Wallet, WalletEvent } from './Wallet';\n\nconst DEFAULT_PROVIDER = 'https://www.sollet.io';\n\n/**\n * Wallet implementation for the sollet.io wallet.\n * It opens a popup browser window that prompts a user\n * to create and connect a simple web wallet.\n */\nexport class SolletWallet extends Wallet {\n  private solletWallet: SolletWalletAdapter;\n\n  constructor(network: string, provider: string = DEFAULT_PROVIDER) {\n    super(network);\n    this.solletWallet = new SolletWalletAdapter(provider, network);\n\n    // once the sollet wallet emits a connect or disconnect event, pass it on\n    this.solletWallet.on(WalletEvent.CONNECT, () => this.emit(WalletEvent.CONNECT));\n    this.solletWallet.on(WalletEvent.DISCONNECT, () => this.emit(WalletEvent.DISCONNECT));\n\n    void this.solletWallet.connect();\n  }\n\n  get pubkey(): PublicKey {\n    return this.solletWallet.publicKey;\n  }\n\n  disconnect(): void {\n    this.solletWallet.disconnect();\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.solletWallet.signTransaction(transaction);\n  }\n}\n","import { Cluster } from '@solana/web3.js';\nimport { WalletType } from 'api/wallet';\nimport { app } from '../app';\n\nexport const connectFx = app.createEffect<void, string>();\n\nexport const disconnectFx = app.createEffect<void, void>();\n\nexport const $cluster = app.createStore<Cluster>('devnet');\n\nexport const clusterPersisted = app.createEvent<any>();\n\nexport const $type = app.createStore<WalletType>(WalletType.SOLLET);\n\nexport const $connected = app.createStore<boolean>(false);\n\nexport const $wallet = app.createStore<string | null>(null);\n","import { forward } from 'effector';\nimport { ButtonClick } from 'types/effector';\nimport { app } from 'models/app';\nimport { connectFx } from 'models/wallet';\n\nexport const connectClicked = app.createEvent<ButtonClick>();\n\nforward({\n  from: connectClicked,\n  to: connectFx,\n});\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { NavLink } from 'react-router-dom';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\nconst NavMenuLink = styled(NavLink)`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n  opacity: 0.8;\n`;\n\nexport const NavMenu: FC = () => {\n  return (\n    <Wrapper>\n      <NavMenuLink to=\"/#myassets\">My assets</NavMenuLink>\n    </Wrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useStore } from 'effector-react';\nimport { Link } from 'react-router-dom';\nimport { $connected } from 'models/wallet';\nimport { Button } from 'components/ui/Button';\nimport { connectClicked } from './model';\nimport { NavMenu } from './NavMenu';\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 88px;\n  padding: 0 50px;\n\n  background: #ffffff;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.05);\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  width: 100%;\n  max-width: 1340px;\n  margin: 0 auto;\n`;\n\nconst Left = styled.div`\n  display: flex;\n`;\n\nconst LogoLink = styled(Link)`\n  font-family: TT Firs Neue, sans-serif;\n  font-weight: 600;\n  font-size: 18px;\n  line-height: 140%;\n`;\n\nconst ByA = styled.a`\n  margin-left: 13px;\n\n  color: #8c8e99;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst Right = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 36px;\n  }\n`;\n\ninterface Props {}\n\nexport const Header: FC<Props> = () => {\n  const connected = useStore($connected);\n\n  return (\n    <Wrapper>\n      <Container>\n        <Left>\n          <LogoLink to=\"/\">.andromeda</LogoLink>\n          <ByA href=\"https://p2p.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            —{'     '}by p2p.org\n          </ByA>\n        </Left>\n\n        <Right>\n          <NavMenu />\n          {!connected ? (\n            <Button primary onClick={connectClicked}>\n              Connect wallet\n            </Button>\n          ) : null}\n        </Right>\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\n\nconst Wrapper = styled.div`\n  width: 100%;\n  max-width: 1068px;\n  margin: 0 auto;\n`;\n\nexport const MainContainer: FC<HTMLAttributes<HTMLDivElement>> = ({\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <Wrapper style={style} className={className}>\n      {children}\n    </Wrapper>\n  );\n};\n","import { app } from 'models/app';\nimport { ModalsState, ModalState } from './types';\n\nexport const $modals = app.createStore<ModalsState>([]);\n\nexport const closeModalFx = app.createEffect<\n  {\n    modalId: number;\n    result?: any;\n  },\n  void\n>();\n\nexport const closeModal = app.createEvent<{ modalId: number }>();\n\nexport const openModalFx = app.createEffect<\n  {\n    modalType: string;\n    props?: any;\n  },\n  Promise<unknown>\n>();\n\nexport const openModal = app.createEvent<ModalState>();\n","export const MODAL_INVEST = 'MODAL_INVEST';\nexport const MODAL_WITHDRAW = 'MODAL_WITHDRAW';\n","import { styled } from '@linaria/react';\n\nexport const Column = styled.div`\n  display: flex;\n\n  width: 100%;\n\n  &.name {\n    max-width: 263px;\n  }\n\n  &.marketCap {\n    max-width: 169px;\n  }\n\n  &.price {\n    max-width: 123px;\n  }\n\n  &.since {\n    max-width: 154px;\n  }\n\n  &.balance {\n    max-width: 121px;\n  }\n`;\n","import React, { FC, useMemo } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { PublicKeyAndAccount } from '@solana/web3.js';\nimport { Button } from 'components/ui/Button';\n\nimport { Avatar } from 'components/common/Avatar';\nimport { openModalFx } from 'models/modals';\nimport {\n  MODAL_INVEST,\n  MODAL_WITHDRAW,\n} from 'components/common/ModalManager/constants';\nimport { Column } from '../common/Column';\nimport { PoolState } from '../../../../../../js/lib/fund';\nimport { shortAddress } from '../../../../utils/common';\nimport { TOKENS } from '../../../../config';\n\nconst TopWrapper = styled.div`\n  display: flex;\n  flex-flow: nowrap;\n\n  padding: 24px;\n`;\n\nconst InfoWrapper = styled.div`\n  margin-left: 12px;\n`;\n\nconst FundName = styled.h4`\n  margin-bottom: 4px;\n\n  color: #5887ff;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\nconst FundDate = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-size: 12px;\n  line-height: 140%;\n`;\n\nconst ColumnValue = styled(Column)`\n  flex-direction: column;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 140%;\n\n  &.price {\n    font-weight: 700;\n  }\n\n  &.alert {\n    color: #ffa631;\n  }\n\n  &.profit {\n    color: #62cf7a;\n  }\n`;\n\nconst AdditionalInfo = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-size: 13px;\n  line-height: 140%;\n`;\n\nconst ColumnButtons = styled.div`\n  opacity: 0;\n\n  & > :not(:last-child) {\n    margin-right: 16px;\n  }\n`;\n\nconst Wrapper = styled.div`\n  background: #ffffff;\n  box-shadow: 0 8px 8px rgba(0, 0, 0, 0.03);\n  border-radius: 12px;\n\n  cursor: pointer;\n\n  transition: box-shadow 100ms cubic-bezier(0.64, 0, 0.35, 1) 0s;\n\n  &:hover {\n    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);\n\n    ${ColumnButtons} {\n      opacity: 1;\n\n      visibility: visible;\n    }\n  }\n`;\n\nconst ButtonStyled = styled(Button)`\n  padding: 0 16px;\n`;\n\nconst BottomWrapper = styled.div`\n  display: grid;\n  grid-auto-columns: 1fr max-content;\n  grid-auto-flow: column;\n\n  padding: 16px 24px;\n\n  border-top: 1px solid rgba(163, 165, 186, 0.2);\n`;\n\nconst TokenSharesRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst TokenShare = styled.div`\n  display: flex;\n  align-items: center;\n\n  min-width: 108px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-size: 12px;\n  line-height: 140%;\n`;\n\nconst TokenName = styled.div`\n  margin-left: 12px;\n\n  font-weight: 600;\n`;\n\nconst TokenShareValue = styled.div`\n  display: inline-block;\n\n  font-weight: 400;\n`;\n\ninterface Props {\n  fund: PublicKeyAndAccount<PoolState>;\n}\n\nexport const FundRow: FC<Props> = ({ fund }) => {\n  const handleOpenInvestModalClick = () => {\n    openModalFx({ modalType: MODAL_INVEST });\n  };\n\n  const handleOpenWithdrawModalClick = (\n    e: React.MouseEvent<HTMLButtonElement>,\n  ) => {\n    e.stopPropagation();\n\n    openModalFx({ modalType: MODAL_WITHDRAW });\n  };\n\n  const tokens = useMemo(() => {\n    const { assets, fundState } = fund.account.data;\n\n    const assetWights = fundState?.assetWeights;\n\n    if (!assetWights) {\n      return [];\n    }\n\n    return assetWights.map((weight, index) => ({\n      mintAddress: assets[index].mint,\n      weight: weight / 10,\n    }));\n  }, [fund]);\n\n  return (\n    <Wrapper onClick={handleOpenInvestModalClick}>\n      <TopWrapper>\n        <Column className={classNames({ name: true })}>\n          <Avatar />\n          <InfoWrapper>\n            <FundName>Alameda Bull DTF (ABDFS)</FundName>\n            <FundDate>Inception date: Feb 26, 2021</FundDate>\n          </InfoWrapper>\n        </Column>\n        <ColumnValue className={classNames({ marketCap: true })}>\n          $12,000,000.21\n        </ColumnValue>\n        <ColumnValue className={classNames({ price: true })}>\n          $124.91\n        </ColumnValue>\n        <ColumnValue className={classNames({ since: true, profit: true })}>\n          + 420.01%\n        </ColumnValue>\n        <ColumnValue className={classNames({ balance: true })}>\n          <div>48.00 ABDFS</div>\n          <AdditionalInfo>Valuation: $5952</AdditionalInfo>\n        </ColumnValue>\n\n        <ColumnButtons>\n          <ButtonStyled\n            primary\n            disabled={false}\n            onClick={handleOpenWithdrawModalClick}\n          >\n            Withdraw\n          </ButtonStyled>\n          <ButtonStyled primary>+ Invest</ButtonStyled>\n        </ColumnButtons>\n      </TopWrapper>\n      <BottomWrapper>\n        <TokenSharesRow>\n          {tokens.map((tokenWeight) => {\n            const tokenMeta = TOKENS.devnet.find(\n              (token) =>\n                token.mintAddress === tokenWeight.mintAddress.toBase58(),\n            );\n\n            return (\n              <TokenShare key={tokenWeight.mintAddress.toBase58()}>\n                <Avatar size={18} src={tokenMeta?.icon} />\n                <TokenName>\n                  {tokenMeta?.tokenName ||\n                    shortAddress(tokenWeight.mintAddress.toBase58())}{' '}\n                  <TokenShareValue>{tokenWeight.weight}%</TokenShareValue>\n                </TokenName>\n              </TokenShare>\n            );\n          })}\n        </TokenSharesRow>\n      </BottomWrapper>\n    </Wrapper>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/arrow-triangle-icon.12c58ff8.svg\";","export default __webpack_public_path__ + \"static/media/checkmark-icon.26a65993.svg\";","import React from 'react';\n\nimport isPropValid from '@emotion/is-prop-valid';\nimport { CSSProperties } from '@linaria/core';\n\nimport { SvgIconType } from 'types/custom';\nimport arrowTriangle from './assets/arrow-triangle-icon.svg';\nimport checkmark from './assets/checkmark-icon.svg';\n\n// TODO: check thats wrong with type\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nconst iconsMap = new Map<string, SvgIconType>([\n  ['arrow-triangle', arrowTriangle],\n  ['checkmark', checkmark],\n]);\n\nexport interface IconType {\n  name: string;\n  size?: string | number;\n  height?: string | number;\n  width?: string | number;\n  style?: CSSProperties;\n  className?: string;\n}\n\nexport const Icon: React.FunctionComponent<IconType> = ({\n  name,\n  size,\n  height,\n  width,\n  ...props\n}) => {\n  const validProps: {\n    [prop: string]: any;\n  } = {};\n\n  Object.keys(props).forEach((prop) => {\n    if (isPropValid(prop)) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      validProps[prop] = props[prop];\n    }\n  });\n\n  const icon = iconsMap.get(name);\n\n  if (!icon) {\n    return null;\n  }\n\n  return (\n    <svg\n      {...validProps}\n      viewBox={icon.viewBox}\n      height={size || height}\n      width={size || width}\n    >\n      <use xlinkHref={`#${icon.id}`} />\n    </svg>\n  );\n};\n","import React, { FunctionComponent, useEffect, useRef, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { Cluster } from '@solana/web3.js';\nimport classNames from 'classnames';\n\nimport { Icon } from 'components/ui/Icon';\n\nimport { ItemRow } from './ItemRow';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nconst SelectorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 153px;\n  margin: 4px;\n\n  cursor: pointer;\n\n  &.isOpen,\n  &:hover {\n  }\n`;\n\nconst ArrowWrapper = styled.div`\n  margin-right: 4px;\n`;\n\nconst ArrowIcon = styled(Icon)`\n  width: 16px;\n  height: 16px;\n\n  color: #a3a5ba;\n`;\n\nconst DropDownList = styled.div`\n  position: absolute;\n  right: 0;\n  z-index: 1;\n\n  min-width: 204px;\n  margin-top: 8px;\n  padding: 8px;\n\n  background: #fff;\n  border-radius: 12px;\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);\n`;\n\nexport const Selector: FunctionComponent = ({ children }) => {\n  const selectorRef = useRef<HTMLDivElement>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleAwayClick = (e: MouseEvent) => {\n    if (!selectorRef.current?.contains(e.target as HTMLDivElement)) {\n      setIsOpen(false);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('click', handleAwayClick);\n\n    return () => {\n      window.removeEventListener('click', handleAwayClick);\n    };\n  }, []);\n\n  const handleSelectorClick = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const handleItemClick = (newCluster: Cluster) => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Wrapper ref={selectorRef}>\n      <SelectorWrapper\n        onClick={handleSelectorClick}\n        className={classNames({ isOpen })}\n      >\n        {children}\n        <ArrowWrapper>\n          <ArrowIcon name=\"arrow-triangle\" />\n        </ArrowWrapper>\n      </SelectorWrapper>\n      {isOpen ? (\n        <DropDownList>\n          {/*<ItemRow*/}\n          {/*  key={itemCluster}*/}\n          {/*  isSelected={cluster === itemCluster}*/}\n          {/*  cluster={itemCluster}*/}\n          {/*  onItemClick={handleItemClick}*/}\n          {/*>*/}\n          {/*  {itemCluster}*/}\n          {/*</ItemRow>*/}\n        </DropDownList>\n      ) : undefined}\n    </Wrapper>\n  );\n};\n","import { forward } from 'effector';\nimport { createGate } from 'effector-react';\nimport { PublicKeyAndAccount } from '@solana/web3.js';\nimport { app } from 'models/app';\nimport { findFundFx } from 'models/connection';\nimport { PoolState } from '../../../../../js/lib/fund';\n\nexport const FundsGate = createGate();\n\nexport const $funds = app.createStore<PublicKeyAndAccount<PoolState>[]>([]);\n\n// $funds.on(findFundsFx.doneData, (_, funds) => funds);\n\n$funds.on(findFundFx.doneData, (state, newFund) => [\n  ...state.filter((find) => !find.pubkey.equals(newFund.pubkey)),\n  newFund,\n]);\n\nforward({\n  from: FundsGate.open,\n  to: findFundFx,\n  // to: findFundsFx,\n});\n","import React, { FC, HTMLAttributes } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\nimport { useGate, useStore } from 'effector-react';\nimport { FundRow } from './FundRow';\nimport { Column } from './common/Column';\nimport { Selector } from './Selector';\nimport { $funds, FundsGate } from './model';\n\nconst Wrapper = styled.div``;\n\nconst Title = styled.div`\n  margin-bottom: 38px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 100%;\n`;\n\nconst ColumnsHeader = styled.div`\n  display: flex;\n  align-items: center;\n\n  height: 36px;\n  padding: 0 26px;\n\n  background: #f6f6f8;\n  border-radius: 12px;\n`;\n\nconst ColumnName = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 13px;\n  line-height: 140%;\n\n  &.since {\n    color: #000000;\n\n    cursor: pointer;\n  }\n`;\n\nconst FundList = styled.div`\n  display: grid;\n  grid-auto-flow: row;\n  grid-gap: 24px;\n\n  margin-top: 20px;\n`;\n\ninterface Props {}\n\nexport const Funds: FC<Props & HTMLAttributes<HTMLDivElement>> = ({\n  style,\n  className,\n}) => {\n  useGate(FundsGate);\n\n  const funds = useStore($funds);\n\n  return (\n    <Wrapper style={style} className={className}>\n      <Title>DTFs</Title>\n      <ColumnsHeader>\n        <Column className={classNames({ name: true })}>\n          <ColumnName>Name</ColumnName>\n        </Column>\n        <Column className={classNames({ marketCap: true })}>\n          <ColumnName>Market Cap</ColumnName>\n        </Column>\n        <Column className={classNames({ price: true })}>\n          <ColumnName>Price</ColumnName>\n        </Column>\n        <Column className={classNames({ since: true })}>\n          <ColumnName className={classNames({ since: true })}>\n            <Selector>Since inception</Selector>\n          </ColumnName>\n        </Column>\n        <Column className={classNames({ balance: true })}>\n          <ColumnName>Balance</ColumnName>\n        </Column>\n      </ColumnsHeader>\n      <FundList>\n        {funds.map((fund) => (\n          <FundRow key={fund.pubkey.toBase58()} fund={fund} />\n        ))}\n      </FundList>\n    </Wrapper>\n  );\n};\n","import React from 'react';\nimport { styled } from '@linaria/react';\nimport { Header } from 'components/common/Header';\nimport { MainContainer } from 'components/common/MainContainer';\nimport { Funds } from './Funds';\n\nconst Wrapper = styled.div`\n  min-height: 100%;\n`;\n\nconst Container = styled(MainContainer)`\n  display: flex;\n  flex-direction: column;\n\n  margin: 100px auto;\n`;\n\nconst Title = styled.h1`\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 62px;\n  line-height: 120%;\n`;\n\nconst Description = styled.div`\n  margin-top: 12px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 120%;\n\n  text-align: center;\n`;\n\nconst FundsStyled = styled(Funds)`\n  margin-top: 85px;\n`;\n\nexport const Home = () => {\n  return (\n    <Wrapper>\n      <Header />\n      <Container>\n        <Title>Non-custodial DEX Traded Funds(DTFs)</Title>\n        <Description>Build on top of Solana and Serum</Description>\n        <FundsStyled />\n      </Container>\n    </Wrapper>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { Redirect } from 'react-router';\nimport { renderRoutes, RouteConfig } from 'react-router-config';\n\nimport { useStore } from 'effector-react';\n\nimport { Home } from 'pages/home';\n// import { NotFound } from 'pages/notFound';\nimport { $connected } from 'models/wallet';\n\ntype RouteConfigCustom = RouteConfig & { needAuth?: boolean };\n\nexport const makeRoutes = (isAuth: boolean): RouteConfigCustom[] =>\n  ([\n    {\n      path: '/',\n      exact: true,\n      component: Home,\n    },\n    {\n      path: '*',\n      component: () => <Redirect to=\"/\" />,\n    },\n    // {\n    //   path: '*',\n    //   component: NotFound,\n    // },\n  ] as RouteConfigCustom[]).map((route) => {\n    if (route.needAuth && route.needAuth !== isAuth) {\n      route.component = () => <Redirect to=\"/\" />;\n      return route;\n    }\n\n    return route;\n  });\n\nexport const Pages = () => {\n  // TODO: Cannot update a component (`Pages`) while rendering a different component\n  const connected = useStore($connected);\n\n  return useMemo(() => renderRoutes(makeRoutes(connected)), [connected]);\n};\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, {\n  createRef,\n  FC,\n  lazy,\n  LazyExoticComponent,\n  RefObject,\n  Suspense,\n  useState,\n} from 'react';\n\nimport { styled } from '@linaria/react';\nimport { last } from 'ramda';\nimport { useStore } from 'effector-react';\nimport { ModalComponentType, ModalState } from 'models/modals/types';\nimport { $modals, closeModalFx } from 'models/modals';\nimport { MODAL_INVEST, MODAL_WITHDRAW } from './constants';\n\nconst Wrapper = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 30;\n\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst ModalContainer = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1;\n\n  overflow-y: auto;\n  overscroll-behavior: none;\n\n  /* Above background */\n  &:last-child {\n    z-index: 2;\n  }\n`;\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 100%;\n  padding: 10px 0;\n`;\n\nconst ModalBackground = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 2;\n\n  background-color: rgba(0, 0, 0, 0.6);\n\n  user-select: none;\n`;\n\nconst modalsMap = new Map<string, LazyExoticComponent<any>>([\n  [MODAL_INVEST, lazy(() => import('components/modals/Invest'))],\n  [MODAL_WITHDRAW, lazy(() => import('components/modals/Withdraw'))],\n]);\n\nexport const ModalManager: FC = () => {\n  const [modalsRefs, setModalsRefs] = useState<{\n    [modalId: string]: RefObject<ModalComponentType>;\n  }>({});\n  const modals = useStore($modals);\n\n  const closeTopModal = async () => {\n    const modal = last(modals);\n    if (!modal) {\n      return;\n    }\n\n    const { modalId } = modal;\n\n    const modalRef = modalsRefs[modalId];\n    if (modalRef.current?.canClose && !(await modalRef.current.canClose())) {\n      return;\n    }\n\n    closeModalFx({ modalId });\n  };\n\n  const handleWrapperClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    // handle click only on element\n    if (e.target !== e.currentTarget) {\n      return;\n    }\n\n    closeTopModal();\n  };\n\n  const getReadyDialogs = () => {\n    const dialogs: (ModalState & {\n      ModalComponent: LazyExoticComponent<any>;\n    })[] = [];\n\n    for (const { modalType, modalId, props } of modals) {\n      const ModalComponent = modalsMap.get(modalType);\n      if (ModalComponent) {\n        dialogs.push({\n          modalType,\n          modalId,\n          props,\n          ModalComponent,\n        });\n      }\n    }\n\n    return dialogs;\n  };\n\n  const dialogsInfo = getReadyDialogs();\n\n  const dialogs = dialogsInfo.map(({ modalId, props, ModalComponent }) => {\n    let modalRef = modalsRefs[modalId];\n\n    if (!modalRef) {\n      modalRef = createRef();\n      setModalsRefs((state) => ({\n        ...state,\n        [modalId]: modalRef,\n      }));\n    }\n\n    return (\n      <Suspense fallback={null} key={modalId}>\n        <ModalContainer>\n          <ModalWrapper onClick={handleWrapperClick}>\n            <ModalComponent\n              {...props}\n              modalId={modalId}\n              modalRef={modalRef}\n              close={(result: any) => closeModalFx({ modalId, result })}\n            />\n          </ModalWrapper>\n        </ModalContainer>\n      </Suspense>\n    );\n  });\n\n  if (dialogs.length > 0) {\n    return (\n      <Wrapper>\n        <ModalBackground />\n        {dialogs}\n      </Wrapper>\n    );\n  }\n\n  return null;\n};\n","import React from 'react';\nimport { Router } from 'react-router';\nimport { useGate } from 'effector-react';\n\nimport { AppGate } from 'models/app';\nimport { history } from 'lib/routing';\nimport { Pages } from './routes';\nimport { ModalManager } from './components/common/ModalManager';\n\nexport const App: React.FC = () => {\n  useGate(AppGate);\n\n  return (\n    <>\n      <Router history={history}>\n        <Pages />\n      </Router>\n      <ModalManager />\n    </>\n  );\n};\n","import { app } from './index';\n\napp.onCreateEffect((newEffect) => {\n  newEffect.failData.watch((payload) => console.error(payload));\n});\n","import * as WalletAPI from 'api/wallet';\nimport { WalletEvent } from 'api/wallet/Wallet';\n\nimport {\n  $cluster,\n  $connected,\n  $type,\n  $wallet,\n  connectFx,\n  disconnectFx,\n} from '.';\n\nconnectFx.use(async () => {\n  const cluster = $cluster.getState();\n  const type = $type.getState();\n  const wallet = await WalletAPI.connect(cluster, type);\n\n  wallet.on(WalletEvent.DISCONNECT, () => {\n    disconnectFx();\n    console.error('Wallet disconnected');\n  });\n\n  wallet.on(WalletEvent.CONFIRMED, ({ transactionSignature }) =>\n    console.info(`Confirmed: ${transactionSignature}`),\n  );\n\n  console.info('Wallet connected');\n\n  return wallet.pubkey.toBase58();\n});\n\ndisconnectFx.use(() => {\n  WalletAPI.disconnect();\n  console.error('Wallet disconnected');\n});\n\n$connected.on(connectFx.done, () => true).on(disconnectFx, () => false);\n\n$wallet.on(connectFx.doneData, (_, wallet) => wallet);\n","import { closeModal, $modals, closeModalFx, openModalFx, openModal } from '.';\n\nconst promises = new Map();\nlet modalId = 0;\n\ncloseModalFx.use(({ modalId, result }): void => {\n  if (!modalId) {\n    throw new Error('Trying to hide modal without modalId');\n  }\n\n  const dialogInfo = promises.get(modalId);\n\n  if (dialogInfo) {\n    dialogInfo.resolve(result);\n    promises.delete(modalId);\n  }\n\n  closeModal({ modalId });\n});\n\nopenModalFx.use(\n  ({ modalType, props }): Promise<unknown> => {\n    const modals = $modals.getState();\n\n    if (modals.some((modal) => modal.modalType === modalType)) {\n      // TODO: custom type of Error\n      throw new Error(`Dublicate of modal ${modalType}`);\n    }\n\n    modalId = ++modalId;\n\n    openModal({ modalType, modalId, props });\n\n    const promise = new Promise((resolve) => {\n      promises.set(modalId, {\n        modalId,\n        resolve,\n      });\n    });\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    promise.modalId = modalId;\n\n    return promise;\n  },\n);\n\n$modals\n  .on(closeModal, (state, payload) =>\n    state.filter((dialog) => dialog.modalId !== payload.modalId),\n  )\n  .on(openModal, (state, payload) => state.concat(payload));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createInspector } from 'effector-logger/inspector';\n\nimport { App } from './App';\nimport { reportWebVitals } from './reportWebVitals';\nimport './models/init';\nimport { css } from '@linaria/core';\nimport { ress } from './styles/ress';\nimport { fonts } from 'styles/fonts';\n\ncreateInspector();\n\nexport const globals = css`\n  :global() {\n    ${ress}\n    ${fonts}\n    html,\n    body,\n    #root {\n      min-height: 0;\n    }\n\n    body {\n      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',\n        'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans',\n        'Helvetica Neue', sans-serif;\n      font-feature-settings: 'kern';\n      text-rendering: optimizeLegibility;\n      -webkit-font-smoothing: antialiased;\n    }\n\n    #root {\n      background: #fbfbfd;\n\n      padding-bottom: 50px;\n    }\n\n    a {\n      text-decoration: none;\n      color: inherit;\n    }\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nexport const reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n","import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  SignatureResult,\n} from '@solana/web3.js';\nimport { identity, memoizeWith } from 'ramda';\n\nimport { defaultCommitment } from 'config';\n\nimport { retryableProxy } from './utils/retryableProxy';\n\n// The default time to wait when confirming a transaction.\nexport const DEFAULT_COMMITMENT: Commitment = defaultCommitment;\n\nlet currentCluster: Cluster;\n\n// Since connection objects include state, we memoise them here per network\nconst createConnection = memoizeWith<(network: string) => Connection>(\n  identity,\n  (network) => {\n    const connection = new Connection(network, DEFAULT_COMMITMENT);\n\n    // Due to an issue with the solana back-end relating to CORS headers on 429 responses\n    // Rate-limiting responses are not retried correctly. Adding this proxy fixes this.\n    const proxiedFunctions = [\n      'getBalance',\n      'getAccountInfo',\n      'getParsedAccountInfo',\n      'getParsedProgramAccounts',\n      'getParsedTokenAccountsByOwner',\n      'getRecentBlockhash',\n      'sendTransaction',\n      'sendRawTransaction',\n      'requestAirdrop',\n    ];\n    proxiedFunctions.forEach((fnName) => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      connection[fnName] = retryableProxy(connection[fnName]);\n    });\n\n    return connection;\n  },\n);\n\nexport const getNetwork = (cluster: Cluster): string => {\n  if (cluster === 'mainnet-beta') {\n    return 'https://solana-api.projectserum.com/';\n  }\n\n  return clusterApiUrl(cluster);\n};\n\nexport const getConnection = (cluster?: Cluster): Connection => {\n  if (cluster) {\n    currentCluster = cluster;\n  }\n\n  const selectedCluster = cluster || currentCluster;\n\n  const network = getNetwork(selectedCluster);\n  return createConnection(network);\n};\n\nexport const confirmTransaction = (\n  signature: string,\n  commitment?: Commitment,\n): Promise<SignatureResult> => {\n  const connection = getConnection();\n  const confirmViaSocket = new Promise<SignatureResult>((resolve) =>\n    connection.onSignature(signature, (signatureResult) => {\n      console.log('Confirmation via socket:', signatureResult);\n      resolve(signatureResult);\n    }),\n  );\n\n  const confirmViaHttp = connection\n    .confirmTransaction(signature, commitment || DEFAULT_COMMITMENT)\n    .then((signatureResult) => {\n      console.log('Confirmation via http:', signatureResult);\n      return signatureResult.value;\n    });\n\n  return Promise.race([confirmViaHttp, confirmViaSocket]);\n};\n","import { mergeLeft } from 'ramda';\n\nimport { sleep } from 'utils/common';\n\ninterface RetryOptions {\n  count: number;\n  intervalMS: number;\n  backoutMultiplier: number;\n}\n\nconst defaultRetryOptions: RetryOptions = {\n  // max number of retries\n  count: 10,\n  intervalMS: 200,\n  // every retry, multiply the interval by this amount\n  backoutMultiplier: 1.5,\n};\n\ninterface GenericAsyncFunction<U, R> {\n  (...args: Array<U>): Promise<R>;\n}\n\n/**\n * Creates a Proxy wraps the function in a retry function.\n * This should be only used if the function is idempotent, i.e. retrying should\n * return the same value and have no side-effects.\n *\n * @param fn\n * @param retryOptions\n */\nexport const retryableProxy = <U, R>(\n  fn: GenericAsyncFunction<U, R>,\n  retryOptions: Partial<RetryOptions> = defaultRetryOptions,\n): GenericAsyncFunction<U, R> => {\n  // combine the passed in options with default options\n  const options = mergeLeft(retryOptions, defaultRetryOptions);\n\n  const retryReducer = <T>(\n    target: GenericAsyncFunction<U, T>,\n    thisArg: unknown,\n    argArray: Array<U>,\n  ) => async (\n    previousValue: Promise<T>,\n    currentValue: Promise<T>,\n    currentIndex: number,\n  ): Promise<T> => {\n    // eslint-disable-next-line unicorn/consistent-function-scoping\n    const call = async () => target.apply(thisArg, argArray);\n\n    // if it hasn't been called yet, call the function\n    if (!previousValue) {\n      return call();\n    }\n\n    //  if it has been called, and failed, catch the error, wait and retry\n    return previousValue.catch((error) => {\n      const sleepMs =\n        options.intervalMS * options.backoutMultiplier ** currentIndex;\n      console.error(error);\n      console.log(\n        `Retrying after ${sleepMs}ms. (Retried ${currentIndex} times)`,\n      );\n\n      return sleep(sleepMs).then(call);\n    });\n  };\n\n  return new Proxy(fn, {\n    // trap the \"apply\" call to the proxied function,\n    // in other words, trap the function call itself\n    apply: (target, thisArg, argArray) => {\n      // reduce over the maximum number of retries.\n      // if any of them pass, the code will short-circuit and skip the rest\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access\n      return [...new Array(options.count)]\n        .reduce(retryReducer(target, thisArg, argArray))\n        .catch((error: Error) => {\n          console.error('No more retries, throwing.');\n          throw error;\n        });\n    },\n  });\n};\n","// the default commitment uesd by the Solana web3 connection when checking the blockchain state\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport {\n  KnownToken,\n  TOKENS as TOKENS_ORIGINAL,\n} from '@solana/spl-token-registry';\n\nexport const isDev =\n  process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test';\n\nexport const defaultCommitment: Commitment =\n  (process.env.DEFAULT_COMMITMENT as Commitment) || 'singleGossip';\n\n// the amount of time to sleep after sending a transaction\n// in order to work around a known solana web3 bug\nexport const postTransactionSleepMS = Number(\n  process.env.POST_TRANSACTION_SLEEP_MS,\n);\n\nexport const DTF_PROGRAM_ID = new PublicKey(\n  process.env.DTF_PROGRAM_ID || 'HWEaSAnjKNADwA2ZopatwCM5BqrnMCPQBKAphf1s6XNW',\n);\n\nexport const TOKENS = {\n  ...TOKENS_ORIGINAL,\n  devnet: [\n    {\n      tokenSymbol: 'SOL',\n      mintAddress: '8UGbGeCyvnWZQ2DL2VDxyCTsmy7dUEoJtJBr9EZxnTH4',\n      tokenName: 'Solana',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/solana/info/logo.png',\n    },\n    {\n      tokenSymbol: 'FTT',\n      mintAddress: 'DLMTFLwUMocgy63KEMb59VBHYPvjWv399N5HFgrXsgnv',\n      tokenName: 'Wrapped FTT',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9/logo.png',\n    },\n    {\n      tokenSymbol: 'REN',\n      mintAddress: '4McZwrFKMo9QhXNQFKuwxhG3aHik6xhsFZBhHVaCW9CJ',\n      tokenName: 'REN',\n      icon: 'https://s2.coinmarketcap.com/static/img/coins/64x64/2539.png',\n    },\n    {\n      tokenSymbol: 'SRM',\n      mintAddress: 'J6L4Ujv82ryQgjnA2rgaFsbtPwRBJNGCQsWdWWuH1aPT',\n      tokenName: 'Serum',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x476c5E26a75bd202a9683ffD34359C0CC15be0fF/logo.png',\n      website: 'https://projectserum.com',\n    },\n    {\n      tokenSymbol: 'SUSHI',\n      mintAddress: '6Cyp4H66L5JE2DnEgpYRBS27sY7rYSLPz6b31q1coUYJ',\n      tokenName: 'Wrapped SUSHI',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0x6B3595068778DD592e39A122f4f5a5cF09C90fE2/logo.png',\n    },\n    {\n      tokenSymbol: 'RAY',\n      mintAddress: '757dVSETUqFjmDQPAkCyiZzumjtShHTb7B8PpFFFUSib',\n      tokenName: 'RAY',\n      icon: 'https://s2.coinmarketcap.com/static/img/coins/64x64/8526.png',\n    },\n    {\n      tokenSymbol: 'FIDA',\n      mintAddress: 'FhxsBCrUZYhiUyWQkfbJQdG9Y32NXmtxFriQs7WMdtwo',\n      tokenName: 'Bonfida',\n      icon:\n        'https://raw.githubusercontent.com/dr497/awesome-serum-markets/02ce7c74fd2e9bd4cb55a15f735fc3ad0e7335f6/icons/fida.svg',\n    },\n    {\n      tokenSymbol: 'USDC',\n      mintAddress: 'DbMXbT2zYBNC9QbbcPtQKEZ491vXiTb4mTXmTBRor1TC',\n      tokenName: 'USDC',\n      icon:\n        'https://raw.githubusercontent.com/trustwallet/assets/f3ffd0b9ae2165336279ce2f8db1981a55ce30f8/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png',\n    },\n  ] as KnownToken[],\n};\n","import { PublicKeyAndAccount } from '@solana/web3.js';\nimport { app } from 'models/app';\nimport { PoolState } from '../../../../js/lib/fund';\n\nexport const findFundFx = app.createEffect<\n  void,\n  PublicKeyAndAccount<PoolState>\n>();\n\nexport const findFundsFx = app.createEffect<\n  void,\n  PublicKeyAndAccount<PoolState>[]\n>();\n","export const sleep: (ms: number) => Promise<void> = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms));\n\nexport function shortAddress(address: string) {\n  return `${address.slice(0, 4)}…${address.slice(-4)}`;\n}\n","import React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nconst ButtonElement = styled.button`\n  height: 46px;\n  padding: 0 40px;\n\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 100%;\n  white-space: nowrap;\n\n  border-radius: 12px;\n  outline: 0;\n\n  &.primary {\n    color: #fff;\n\n    background: #5887ff;\n  }\n\n  &.hollow {\n    color: #5887ff;\n\n    background: #ffffff;\n  }\n\n  &.full {\n    width: 100%;\n  }\n\n  &:disabled {\n    color: #fff;\n\n    background: #a3a5ba;\n  }\n`;\n\ninterface Props {\n  primary?: boolean;\n  hollow?: boolean;\n  full?: boolean;\n}\n\nexport const Button: FC<Props & ButtonHTMLAttributes<HTMLButtonElement>> = ({\n  onClick,\n  primary,\n  hollow,\n  full,\n  disabled,\n  children,\n  style,\n  className,\n}) => {\n  return (\n    <ButtonElement\n      disabled={disabled}\n      onClick={onClick}\n      style={style}\n      className={classNames(className, { primary, hollow, full })}\n    >\n      {children}\n    </ButtonElement>\n  );\n};\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Fund = exports.schema = exports.PoolState = exports.FundState = exports.ParamDesc = exports.AssetInfo = exports.PoolRequest = exports.InitializePoolRequest = exports.InitializeFundData = exports.PoolRequestInner = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst borsh = __importStar(require(\"borsh\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nclass Assignable {\n    constructor(properties) {\n        Object.keys(properties).map((key) => {\n            this[key] = properties[key];\n        });\n    }\n}\nclass PubKey extends web3_js_1.PublicKey {\n    constructor({ value }) {\n        super(value);\n    }\n}\nclass OptionAddress extends web3_js_1.PublicKey {\n    constructor({ value }) {\n        super(value.slice(1, value.length));\n    }\n}\nconst PoolRequestTag = new bn_js_1.default('220a6cbdcd1cc4cf', 'hex');\nclass PoolRequestInner extends Assignable {\n}\nexports.PoolRequestInner = PoolRequestInner;\nclass InitializeFundData extends Assignable {\n}\nexports.InitializeFundData = InitializeFundData;\nclass InitializePoolRequest extends PoolRequestInner {\n}\nexports.InitializePoolRequest = InitializePoolRequest;\nclass PoolRequest extends Assignable {\n}\nexports.PoolRequest = PoolRequest;\nclass AssetInfo extends Assignable {\n}\nexports.AssetInfo = AssetInfo;\nclass ParamDesc extends Assignable {\n}\nexports.ParamDesc = ParamDesc;\nclass FundState extends Assignable {\n}\nexports.FundState = FundState;\nclass PoolState extends Assignable {\n}\nexports.PoolState = PoolState;\nexports.schema = new Map([\n    [\n        PoolRequest,\n        {\n            kind: 'struct',\n            fields: [\n                ['tag', 'u64'],\n                ['index', 'u8'],\n                ['inner', PoolRequestInner],\n            ],\n        },\n    ],\n    [\n        InitializePoolRequest,\n        {\n            kind: 'struct',\n            fields: [\n                ['nonce', 'u8'],\n                ['assetsLength', 'u8'],\n                ['poolName', 'string'],\n                ['feeRate', 'u32'],\n                ['customData', ['u8']],\n            ],\n        },\n    ],\n    [\n        InitializeFundData,\n        {\n            kind: 'struct',\n            fields: [\n                ['slippageDivider', 'u64'],\n                ['assetWeights', ['u32']],\n                ['initialSupply', 'u64'],\n            ],\n        },\n    ],\n    [\n        OptionAddress,\n        {\n            kind: 'struct',\n            fields: [['value', [33]]],\n        },\n    ],\n    [\n        PubKey,\n        {\n            kind: 'struct',\n            fields: [['value', [32]]],\n        },\n    ],\n    [\n        AssetInfo,\n        {\n            kind: 'struct',\n            fields: [\n                ['mint', PubKey],\n                ['vaultAddress', PubKey],\n            ],\n        },\n    ],\n    [\n        PoolState,\n        {\n            kind: 'struct',\n            fields: [\n                ['tag', 'u64'],\n                ['poolTokenMint', PubKey],\n                ['assets', [AssetInfo]],\n                ['vaultSigner', PubKey],\n                ['vaultSignerNonce', 'u8'],\n                ['accountParams', [ParamDesc]],\n                ['name', 'string'],\n                ['lqdFeeVault', PubKey],\n                ['initializerFeeVault', PubKey],\n                ['feeRate', 'u32'],\n                ['adminKey', OptionAddress],\n                ['customState', ['u8']],\n            ],\n        },\n    ],\n    [\n        ParamDesc,\n        {\n            kind: 'struct',\n            fields: [\n                ['address', PubKey],\n                ['writable', 'u8'],\n            ],\n        },\n    ],\n    [\n        FundState,\n        {\n            kind: 'struct',\n            fields: [\n                ['paused', 'u8'],\n                ['slippageDivider', 'u64'],\n                ['assetWeights', ['u32']],\n                ['basicAsset', AssetInfo],\n            ],\n        },\n    ],\n]);\nclass Fund {\n    constructor(connection, fundProgramId) {\n        Object.assign(this, {\n            connection,\n            fundProgramId,\n        });\n    }\n    static createInitSwapInstruction(fundProgramId, fundAccount, fundTokenMint, fundVaultAccounts, fundVaultAuthority, lqdFeeAccount, initializerFeeAccount, sysvar, fundAdminAccount, initialSupplyFundTokenAccount, fundBasicTokenVaultAccount, tokenProgramId, nonce, poolName, feeRate, assetWeights, initialSupply, slippageDivider) {\n        const keys = [\n            { pubkey: fundAccount, isSigner: false, isWritable: true },\n            { pubkey: fundTokenMint, isSigner: false, isWritable: true },\n            ...fundVaultAccounts.map((acc) => ({ pubkey: acc, isSigner: false, isWritable: true })),\n            { pubkey: fundVaultAuthority, isSigner: false, isWritable: false },\n            { pubkey: lqdFeeAccount, isSigner: false, isWritable: false },\n            { pubkey: initializerFeeAccount, isSigner: false, isWritable: false },\n            { pubkey: sysvar, isSigner: false, isWritable: false },\n            { pubkey: fundAdminAccount, isSigner: false, isWritable: true },\n            { pubkey: initialSupplyFundTokenAccount, isSigner: false, isWritable: true },\n            { pubkey: fundBasicTokenVaultAccount, isSigner: false, isWritable: false },\n            { pubkey: tokenProgramId, isSigner: false, isWritable: false },\n        ];\n        const initializeFundData = new InitializeFundData({\n            slippageDivider,\n            assetWeights,\n            initialSupply,\n        });\n        const serializedInitializeFundData = borsh.serialize(exports.schema, initializeFundData);\n        const initializePoolRequest = new InitializePoolRequest({\n            nonce,\n            assetsLength: fundVaultAccounts.length,\n            poolName,\n            feeRate,\n            customData: serializedInitializeFundData,\n        });\n        const poolRequest = new PoolRequest({\n            tag: PoolRequestTag,\n            index: 0,\n            inner: initializePoolRequest,\n        });\n        const serializedData = borsh.serialize(exports.schema, poolRequest);\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: fundProgramId,\n            data: Buffer.from(serializedData.buffer, serializedData.byteOffset, serializedData.byteLength),\n        });\n    }\n    static decodePoolState(buffer) {\n        const poolState = borsh.deserialize(exports.schema, PoolState, buffer);\n        const fundState = borsh.deserialize(exports.schema, FundState, Buffer.from(poolState.customState));\n        poolState.fundState = fundState;\n        return poolState;\n    }\n}\nexports.Fund = Fund;\n","import React, { FC } from 'react';\n\nimport { styled } from '@linaria/react';\nimport avatarImg from './avatar.png';\n\nconst Wrapper = styled.div<{\n  src?: string;\n  size?: string | number;\n  circle?: boolean;\n}>`\n  width: ${(props) => props.size || '32'}px;\n  height: ${(props) => props.size || '32'}px;\n\n  background-color: #f6f6f8;\n  background-image: ${(props) => (props.src ? `url(\"${props.src}\")` : 'none')};\n  background-size: ${(props) => props.size || '32'}px;\n  background-repeat: no-repeat;\n  background-position: center;\n  border-radius: 50%;\n\n  &:not([src]) {\n    background-image: url('${avatarImg}');\n    background-size: 17px 15px;\n  }\n`;\n\ninterface Props {\n  // TODO: src is temp, use symbol and find icon\n  src?: string;\n  symbol?: string;\n  size?: string | number;\n}\n\nexport const Avatar: FC<Props> = ({ src, symbol, size }) => {\n  return <Wrapper src={src} size={size} />;\n};\n"],"sourceRoot":""}