{"version":3,"sources":["components/ui/Input/Input.tsx","components/common/Modal/Modal.tsx","api/fund/index.ts","components/modals/Invest/model.ts","components/modals/Invest/Invest.tsx"],"names":["Somefix","WrapperLabel","InputElement","Input","className","useState","style","classNames","isFocus","left","placeholder","value","onChange","onFocus","setIsFocus","onBlur","right","Wrapper","Header","Title","Description","CloseWrapper","Content","Modal","title","description","close","onClick","children","createAccountByMint","owner","token","instructions","cleanupInstructions","signers","a","connection","getConnection","newAccount","Account","getMinimumBalanceForRentExemption","AccountLayout","span","accountRentExempt","push","SystemProgram","createAccount","fromPubkey","getWallet","pubkey","newAccountPubkey","publicKey","lamports","space","programId","TOKEN_PROGRAM_ID","SPLToken","createInitAccountInstruction","adjustForSlippage","amount","direction","slippage","slippageFractional","slippageMultiplier","isReverseSwap","pool","fromToken","mintA","equals","Fund","baseTokenAccount","baseAmount","fund","pools","account","data","poolTokenMint","poolTokenMintPopulated","assets","fundState","lqdFeeVault","initializerFeeVault","Error","toBase58","fundVaultAccounts","map","asset","vaultAddress","PublicKey","findProgramAddress","toBuffer","DTF_PROGRAM_ID","authority","userPoolTokenAccount","userTransferAuthority","Decimal","userAssetsAccountsPromises","index","vaultPopulated","find","mint","mintB","tokenAccountAPopulated","tokenAccountBPopulated","weight","assetWeights","fromAmount","div","console","log","toString","isReverse","feeRatio","tradeFeeNumerator","toNumber","tradeFeeDenominator","tokenAmount","firstAmountInPool","secondAmountInPool","adjustedAmount","invariant","mul","newFromAmountInPool","add","newToAmountInPool","divToInt","grossToAmount","sub","fees","floor","minimumToAmountWithoutSlippage","minimumToAmountWithSlippage","poolIntoAccount","tokenAccountB","tokenAccountA","poolFromAccount","userAssetAccount","createApproveInstruction","u64","TokenSwap","swapInstruction","address","mintAuthority","feeAccount","SWAP_PROGRAM_ID","Numberu64","totalPoolTokens","Number","supply","poolAssetQuantity","poolTokensRequested","Promise","all","userAssetsAccounts","FUND","createExecuteInstruction","HOST_FEE_VAULT","BN","makeTransaction","transaction","sendTransaction","InvestGate","createGate","$amount","app","createStore","$currentFund","investClicked","createEvent","setAmount","changeAmount","$baseTokenAccount","combine","$tokenAccounts","tokenAccounts","currentFund","basicAsset","filteredTokenAccounts","filter","tokenAccount","length","$isLoading","getParsedTokenAccountsByOwnerFx","pending","fetchRatesFx","findFundsFx","findFundFx","findPoolsFx","b","c","d","e","on","_","newAmount","currentTarget","isPoolAsset","any","or","pathEq","watch","getState","error","assetsPools","$pools","decimals","execute","forward","from","open","to","WrapperModal","InvestWrapper","FundInfoWrapper","FundName","InputsWrapper","BalanceWrapper","OptionsWrapper","AvailableBalance","Option","Footer","InvestButton","Invest","useGate","useStore","isLoading","fundMeta","useMemo","FUNDS","fundItem","handleAllBalanceClick","size","src","fundName","prefix","postfix","shortAddress","full","primary","disabled"],"mappings":"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","file":"static/js/4.eaf8685f.chunk.js","sourcesContent":["import React, { FC, InputHTMLAttributes, useState } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport classNames from 'classnames';\r\n\r\nconst Somefix = styled.div`\r\n  min-width: 70px;\r\n\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 100%;\r\n\r\n  &.left {\r\n    text-align: left;\r\n  }\r\n\r\n  &.right {\r\n    text-align: right;\r\n  }\r\n`;\r\n\r\nconst WrapperLabel = styled.label`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  height: 56px;\r\n  padding: 0 20px;\r\n\r\n  background: #fbfbfd;\r\n  border-radius: 12px;\r\n\r\n  &.isFocus {\r\n    background: #fbfbfd;\r\n    border: 1px solid #5887ff;\r\n\r\n    ${Somefix} {\r\n      color: #000000;\r\n    }\r\n  }\r\n`;\r\n\r\nconst InputElement = styled.input`\r\n  height: 100%;\r\n  width: auto;\r\n  padding: 0 20px;\r\n\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 24px;\r\n  line-height: 100%;\r\n  text-align: center;\r\n\r\n  outline: 0;\r\n\r\n  &::placeholder {\r\n    color: #a3a5ba;\r\n  }\r\n\r\n  &:focus {\r\n    color: #5887ff;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  prefix: string;\r\n  postfix: string;\r\n}\r\n\r\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\r\n  prefix,\r\n  postfix,\r\n  placeholder,\r\n  value,\r\n  onChange,\r\n  style,\r\n  className,\r\n}) => {\r\n  const [isFocus, setIsFocus] = useState(false);\r\n\r\n  const handleFocus = () => {\r\n    setIsFocus(true);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setIsFocus(false);\r\n  };\r\n\r\n  return (\r\n    <WrapperLabel style={style} className={classNames(className, { isFocus })}>\r\n      <Somefix className={classNames({ left: true })}>{prefix}</Somefix>\r\n      <InputElement\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n      />\r\n      <Somefix className={classNames({ right: true })}>{postfix}</Somefix>\r\n    </WrapperLabel>\r\n  );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport closeImg from './close.png';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  background-color: #fff;\r\n  border-radius: 20px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  position: relative;\r\n\r\n  padding: 20px;\r\n\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n`;\r\n\r\nconst Title = styled.div`\r\n  color: #000;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  line-height: 100%;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  margin-top: 10px;\r\n\r\n  color: rgba(0, 0, 0, 0.5);\r\n  font-size: 14px;\r\n  line-height: 17px;\r\n`;\r\n\r\nconst CloseWrapper = styled.div`\r\n  position: absolute;\r\n  top: 15px;\r\n  right: 15px;\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 32px;\r\n  height: 32px;\r\n\r\n  background: #f6f6f8 url('${closeImg}') no-repeat 50% 50%;\r\n  background-size: 16px;\r\n  border-radius: 8px;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Content = styled.div``;\r\n\r\ninterface Props {\r\n  title?: React.ReactNode;\r\n  description?: React.ReactNode;\r\n  close?: () => void;\r\n  className?: string;\r\n}\r\n\r\nexport const Modal: FunctionComponent<Props> = ({\r\n  title,\r\n  description,\r\n  close,\r\n  children,\r\n  className,\r\n}) => {\r\n  return (\r\n    <Wrapper className={className}>\r\n      <Header>\r\n        {title ? <Title>{title}</Title> : undefined}\r\n        {description ? <Description>{description}</Description> : undefined}\r\n        {close ? <CloseWrapper onClick={close} /> : undefined}\r\n      </Header>\r\n      {children ? <Content>{children}</Content> : undefined}\r\n    </Wrapper>\r\n  );\r\n};\r\n","import { AccountLayout, Token as SPLToken, u64 } from '@solana/spl-token';\r\nimport {\r\n  Account,\r\n  PublicKey,\r\n  SystemProgram,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\nimport nacl from 'tweetnacl';\r\nimport { Numberu64, TokenSwap } from '@solana/spl-token-swap';\r\nimport { Decimal } from 'decimal.js';\r\nimport BN from 'bn.js';\r\nimport { getWallet, makeTransaction, sendTransaction } from 'api/wallet';\r\nimport {\r\n  DTF_PROGRAM_ID,\r\n  HOST_FEE_VAULT,\r\n  SWAP_PROGRAM_ID,\r\n  TOKEN_PROGRAM_ID,\r\n} from 'config';\r\nimport { FundType, TokenSwapPopulated } from 'models/types';\r\nimport { getConnection } from 'api/connection';\r\nimport { TokenSwapType } from 'models/connection/layouts/tokenSwap';\r\nimport { Fund as FUND } from '../../../../js/lib/fund';\r\n\r\nconst createAccountByMint = async (\r\n  owner: PublicKey,\r\n  token: PublicKey,\r\n  instructions: TransactionInstruction[],\r\n  cleanupInstructions: TransactionInstruction[],\r\n  signers: Account[],\r\n) => {\r\n  const connection = getConnection();\r\n  const newAccount = new Account();\r\n\r\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\r\n    AccountLayout.span,\r\n  );\r\n\r\n  instructions.push(\r\n    SystemProgram.createAccount({\r\n      fromPubkey: getWallet().pubkey,\r\n      newAccountPubkey: newAccount.publicKey,\r\n      lamports: accountRentExempt,\r\n      space: AccountLayout.span,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n  );\r\n\r\n  instructions.push(\r\n    SPLToken.createInitAccountInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      token,\r\n      newAccount.publicKey,\r\n      owner,\r\n    ),\r\n  );\r\n\r\n  signers.push(newAccount);\r\n\r\n  return newAccount.publicKey;\r\n};\r\n\r\n// const createSwapTransactionInstruction = (\r\n//     parameters: Required<SwapParameters> & {\r\n//       hostFeePublicKey?: PublicKey;\r\n//     },\r\n// ): TransactionInstruction => {\r\n//   const isReverse = isReverseSwap(parameters);\r\n//   const poolIntoAccount = isReverse ? parameters.pool.tokenB : parameters.pool.tokenA;\r\n//   const poolFromAccount = isReverse ? parameters.pool.tokenA : parameters.pool.tokenB;\r\n//\r\n//   // handle slippage by setting a minimum expected TO amount\r\n//   // the transaction will fail if the received amount is lower than this.\r\n//   const minimumToAmountWithoutSlippage = parameters.pool.calculateAmountInOtherToken(\r\n//       parameters.fromAccount.mint,\r\n//       parameters.fromAmount,\r\n//       true,\r\n//   );\r\n//\r\n//   const minimumToAmountWithSlippage = adjustForSlippage(\r\n//       minimumToAmountWithoutSlippage,\r\n//       'down',\r\n//       parameters.slippage,\r\n//   );\r\n//\r\n//   const authority = parameters.pool.tokenSwapAuthority();\r\n//\r\n//   return TokenSwap.swapInstruction(\r\n//       parameters.pool.address,\r\n//       authority,\r\n//       parameters.fromAccount.address,\r\n//       poolIntoAccount.address,\r\n//       poolFromAccount.address,\r\n//       parameters.toAccount.address,\r\n//       parameters.pool.poolToken.address,\r\n//       parameters.pool.feeAccount.address,\r\n//       parameters.hostFeePublicKey || null,\r\n//       swapProgramId,\r\n//       TOKEN_PROGRAM_ID,\r\n//       parameters.fromAmount,\r\n//       minimumToAmountWithSlippage.toNumber(),\r\n//   );\r\n// };\r\n//\r\n// export const swap = () => {\r\n//   // Create WSOL or Token account\r\n//   const fromAccount =\r\n//       parameters.fromAccount.mint.address.equals(WRAPPED_SOL_MINT) &&\r\n//       parameters.fromAccount.mint.isSimulated\r\n//           ? await createWrappedSolAccount(\r\n//           parameters.fromAccount,\r\n//           parameters.fromAmount,\r\n//           instructions,\r\n//           cleanupInstructions,\r\n//           signers,\r\n//           )\r\n//           : parameters.fromAccount;\r\n//\r\n//   // get the toAccount from the parameters, or create it if not present\r\n//   const isReverse = isReverseSwap(parameters);\r\n//   const toToken = isReverse ? parameters.pool.tokenA.mint : parameters.pool.tokenB.mint;\r\n//\r\n//   // Token account or Create Token account\r\n//   const toAccount =\r\n//       parameters.toAccount && !parameters.toAccount.mint.address.equals(WRAPPED_SOL_MINT)\r\n//           ? parameters.toAccount\r\n//           : await createAccountByMint(\r\n//           getWallet().pubkey,\r\n//           toToken,\r\n//           instructions,\r\n//           cleanupInstructions,\r\n//           signers,\r\n//           );\r\n//\r\n//   console.log('Executing swap:', parameters);\r\n//\r\n//   const delegate = parameters.pool.tokenSwapAuthority();\r\n//\r\n//   // approveInstruction\r\n//   instructions.push(tokenAPI.approveInstruction(fromAccount, delegate, parameters.fromAmount));\r\n//\r\n//   // swapInstruction\r\n//   instructions.push(\r\n//       createSwapTransactionInstruction({\r\n//         fromAccount,\r\n//         fromAmount: parameters.fromAmount,\r\n//         toAccount,\r\n//         hostFeePublicKey: null,\r\n//         slippage: parameters.slippage || 0,\r\n//         pool: parameters.pool,\r\n//       }),\r\n//   );\r\n// }\r\n\r\ntype SlippageDirection = 'down' | 'up';\r\n/**\r\n * Adjust an amount either up or down according to a slippage parameter\r\n * The default slippage parameter is DEFAULT_SLIPPAGE.\r\n * e.g. if parameters.slippage is 0.1, the amount is 100, and the direction is\r\n * \"down\",\r\n * the result is 100 * (1 - 0.1) = 90\r\n *\r\n * @param amount\r\n * @param direction\r\n * @param slippage\r\n */\r\nexport const adjustForSlippage = (\r\n  amount: number,\r\n  direction: SlippageDirection,\r\n  slippage = 0,\r\n) => {\r\n  const slippageFractional = slippage / 100;\r\n  const slippageMultiplier =\r\n    1 + (direction === 'up' ? slippageFractional : -slippageFractional);\r\n\r\n  return amount * slippageMultiplier; // TODO: check its need or not \".floor()\"\r\n};\r\n\r\nconst isReverseSwap = (pool: TokenSwapType, fromToken: PublicKey) =>\r\n  pool.mintA.equals(fromToken);\r\n\r\nexport class Fund {\r\n  // eslint-disable-next-line sonarjs/cognitive-complexity\r\n  static async execute(\r\n    baseTokenAccount: PublicKey,\r\n    baseAmount: Decimal,\r\n    fund: FundType,\r\n    pools: TokenSwapPopulated[],\r\n    slippage = 0.1,\r\n  ) {\r\n    const instructions: TransactionInstruction[] = [];\r\n    const cleanupInstructions: TransactionInstruction[] = [];\r\n    const signers: Account[] = [];\r\n\r\n    const {\r\n      poolTokenMint,\r\n      poolTokenMintPopulated,\r\n      assets,\r\n      fundState,\r\n      lqdFeeVault,\r\n      initializerFeeVault,\r\n    } = fund.account.data;\r\n\r\n    if (!poolTokenMintPopulated) {\r\n      throw new Error(\r\n        `While Fund execute did not found pool token mint info for fund: ${fund.pubkey.toBase58()}`,\r\n      );\r\n    }\r\n\r\n    if (!fundState) {\r\n      throw new Error(`While Fund execute fundState does not exists`);\r\n    }\r\n\r\n    const fundVaultAccounts = assets.map((asset) => asset.vaultAddress);\r\n\r\n    const [authority] = await PublicKey.findProgramAddress(\r\n      [fund.pubkey.toBuffer()],\r\n      DTF_PROGRAM_ID,\r\n    );\r\n\r\n    const userPoolTokenAccount = await createAccountByMint(\r\n      getWallet().pubkey,\r\n      poolTokenMint,\r\n      instructions,\r\n      cleanupInstructions,\r\n      signers,\r\n    );\r\n\r\n    const userTransferAuthority = new Account();\r\n\r\n    signers.push(userTransferAuthority);\r\n\r\n    let amount = new Decimal(0);\r\n\r\n    // TODO: decimal.js\r\n    const userAssetsAccountsPromises = assets.map(async (asset, index) => {\r\n      if (!asset.vaultPopulated) {\r\n        throw new Error(\r\n          `While Fund execute did not found vaultPopulated for asset: ${asset.vaultAddress.toBase58()}`,\r\n        );\r\n      }\r\n\r\n      const pool = pools.find(\r\n        (pool) =>\r\n          pool.mintA.equals(asset.mint) || pool.mintB.equals(asset.mint),\r\n      );\r\n      if (!pool) {\r\n        throw new Error(\r\n          `While Fund execute did not found pool for asset: ${asset.vaultAddress.toBase58()}`,\r\n        );\r\n      }\r\n\r\n      if (!pool.tokenAccountAPopulated || !pool.tokenAccountBPopulated) {\r\n        throw new Error(\r\n          `While Fund execute did not found tokenAccountAPopulated/tokenAccountBPopulated`,\r\n        );\r\n      }\r\n\r\n      const weight = fundState.assetWeights[index] / 10;\r\n      const fromAmount = baseAmount.div(weight);\r\n\r\n      console.log('fromAmount:', fromAmount.toString());\r\n\r\n      /**\r\n       * Swap amount calculation\r\n       */\r\n      const isReverse = isReverseSwap(pool, asset.mint);\r\n\r\n      const feeRatio =\r\n        pool.tradeFeeNumerator.toNumber() / pool.tradeFeeDenominator.toNumber();\r\n\r\n      // handle slippage by setting a minimum expected TO amount\r\n      // the transaction will fail if the received amount is lower than this.\r\n      const [firstAmountInPool, secondAmountInPool] = isReverse\r\n        ? [\r\n            new Decimal(pool.tokenAccountBPopulated.tokenAmount.amount),\r\n            new Decimal(pool.tokenAccountAPopulated.tokenAmount.amount),\r\n          ]\r\n        : [\r\n            new Decimal(pool.tokenAccountAPopulated.tokenAmount.amount),\r\n            new Decimal(pool.tokenAccountBPopulated.tokenAmount.amount),\r\n          ];\r\n\r\n      const adjustedAmount = fromAmount;\r\n\r\n      const invariant = firstAmountInPool.mul(secondAmountInPool);\r\n      const newFromAmountInPool = firstAmountInPool.add(adjustedAmount);\r\n\r\n      const newToAmountInPool = invariant.divToInt(newFromAmountInPool);\r\n      const grossToAmount = secondAmountInPool.sub(newToAmountInPool);\r\n      const fees = grossToAmount.mul(feeRatio).floor();\r\n\r\n      const minimumToAmountWithoutSlippage = grossToAmount.sub(fees).toNumber();\r\n\r\n      const minimumToAmountWithSlippage = adjustForSlippage(\r\n        minimumToAmountWithoutSlippage,\r\n        'down',\r\n        slippage,\r\n      );\r\n\r\n      /**\r\n       * Swap\r\n       */\r\n      const poolIntoAccount = isReverse\r\n        ? pool.tokenAccountB\r\n        : pool.tokenAccountA;\r\n      const poolFromAccount = isReverse\r\n        ? pool.tokenAccountB\r\n        : pool.tokenAccountA;\r\n\r\n      const userAssetAccount = await createAccountByMint(\r\n        getWallet().pubkey,\r\n        poolTokenMint,\r\n        instructions,\r\n        cleanupInstructions,\r\n        signers,\r\n      );\r\n\r\n      instructions.push(\r\n        SPLToken.createApproveInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          baseTokenAccount,\r\n          userTransferAuthority.publicKey,\r\n          getWallet().pubkey,\r\n          [],\r\n          new u64(fromAmount.toNumber()),\r\n        ),\r\n      );\r\n\r\n      instructions.push(\r\n        TokenSwap.swapInstruction(\r\n          pool.address,\r\n          new PublicKey(poolTokenMintPopulated.mintAuthority),\r\n          userTransferAuthority.publicKey,\r\n          baseTokenAccount,\r\n          poolIntoAccount,\r\n          poolFromAccount,\r\n          userAssetAccount,\r\n          poolTokenMint,\r\n          pool.feeAccount,\r\n          null,\r\n          SWAP_PROGRAM_ID,\r\n          TOKEN_PROGRAM_ID,\r\n          new Numberu64(fromAmount.toNumber()),\r\n          minimumToAmountWithSlippage,\r\n        ),\r\n      );\r\n\r\n      console.log('minimumToAmountWithSlippage:', minimumToAmountWithSlippage);\r\n\r\n      /**\r\n       * Pool tokens requested calculation\r\n       */\r\n      const totalPoolTokens = Number(poolTokenMintPopulated.supply);\r\n      const poolAssetQuantity = asset.vaultPopulated.tokenAmount.amount;\r\n      // const poolTokensRequested = new Decimal(\r\n      //   minimumToAmountWithSlippage * poolTokensSupply - poolTokensSupply + 1,\r\n      // ).mul(poolAssetQuantity);\r\n      const poolTokensRequested = new Decimal(\r\n        totalPoolTokens * (minimumToAmountWithSlippage - 1) + 1,\r\n      ).div(poolAssetQuantity);\r\n\r\n      amount = amount.add(poolTokensRequested);\r\n\r\n      return userTransferAuthority.publicKey;\r\n    });\r\n\r\n    const userAssetsAccounts = await Promise.all(userAssetsAccountsPromises);\r\n\r\n    // To int\r\n    amount = amount.floor();\r\n\r\n    console.log('amount:', amount.toString());\r\n\r\n    instructions.push(\r\n      FUND.createExecuteInstruction(\r\n        DTF_PROGRAM_ID,\r\n        fund.pubkey,\r\n        poolTokenMint,\r\n        fundVaultAccounts,\r\n        authority,\r\n        userPoolTokenAccount,\r\n        userAssetsAccounts,\r\n        getWallet().pubkey,\r\n        lqdFeeVault,\r\n        initializerFeeVault,\r\n        HOST_FEE_VAULT,\r\n        TOKEN_PROGRAM_ID,\r\n        new BN(amount.toString()),\r\n      ),\r\n    );\r\n\r\n    const transaction = await makeTransaction(\r\n      [...instructions, ...cleanupInstructions],\r\n      signers,\r\n    );\r\n\r\n    return sendTransaction(transaction);\r\n  }\r\n}\r\n","import { combine, forward } from 'effector';\r\nimport { createGate } from 'effector-react';\r\nimport Decimal from 'decimal.js';\r\nimport { any, or, pathEq } from 'ramda';\r\nimport { app } from 'models/app';\r\nimport { ButtonClick, InputChange } from 'types/effector';\r\nimport { AssetType, FundType } from 'models/types';\r\nimport { $pools, findPoolsFx } from 'models/pools';\r\nimport { Fund } from 'api/fund';\r\nimport {\r\n  $tokenAccounts,\r\n  getParsedTokenAccountsByOwnerFx,\r\n} from 'models/connection';\r\nimport { TokenSwapType } from 'models/connection/layouts/tokenSwap';\r\nimport { fetchRatesFx } from '../../../models/rates';\r\nimport { findFundFx, findFundsFx } from '../../../models/funds';\r\n\r\nexport const InvestGate = createGate<FundType>();\r\n\r\nexport const $amount = app.createStore<Decimal>(new Decimal(0));\r\n\r\nexport const $currentFund = app.createStore<FundType | null>(null);\r\n\r\nexport const investClicked = app.createEvent<ButtonClick>();\r\n\r\nexport const setAmount = app.createEvent<Decimal>();\r\nexport const changeAmount = app.createEvent<InputChange>();\r\n\r\nexport const $baseTokenAccount = combine(\r\n  $tokenAccounts,\r\n  $currentFund,\r\n  (tokenAccounts, currentFund) => {\r\n    if (!currentFund) {\r\n      return null;\r\n    }\r\n\r\n    const token = currentFund.account.data.fundState?.basicAsset.mint.toBase58();\r\n\r\n    if (!token) {\r\n      return null;\r\n    }\r\n\r\n    const filteredTokenAccounts = tokenAccounts.filter(\r\n      (tokenAccount) => tokenAccount.account.data.mint === token,\r\n    );\r\n\r\n    if (filteredTokenAccounts.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    return filteredTokenAccounts[0];\r\n  },\r\n);\r\n\r\nexport const $isLoading = combine(\r\n  getParsedTokenAccountsByOwnerFx.pending,\r\n  fetchRatesFx.pending,\r\n  findFundsFx.pending,\r\n  findFundFx.pending,\r\n  findPoolsFx.pending,\r\n  (a, b, c, d, e) => a || b || c || d || e,\r\n);\r\n\r\n$amount\r\n  .on(setAmount, (_, newAmount) => newAmount)\r\n  .on(changeAmount, (_, e) => new Decimal(Number(e.currentTarget.value)));\r\n\r\nconst isPoolAsset = (assets: AssetType[]) => (pool: TokenSwapType) =>\r\n  any(or(pathEq(['mint'], pool.mintA), pathEq(['mint'], pool.mintB)), assets);\r\n\r\ninvestClicked.watch(async () => {\r\n  const fund = $currentFund.getState();\r\n  if (!fund) {\r\n    console.error('fund did not passed');\r\n    return;\r\n  }\r\n\r\n  const baseTokenAccount = $baseTokenAccount.getState();\r\n  if (!baseTokenAccount) {\r\n    console.error('baseTokenAccount did not passed');\r\n    return;\r\n  }\r\n\r\n  const assetsPools = $pools\r\n    .getState()\r\n    .filter(isPoolAsset(fund.account.data.assets));\r\n  if (assetsPools.length !== fund.account.data.assets.length) {\r\n    console.error('did not enought pools for assets');\r\n    return;\r\n  }\r\n\r\n  const amount = $amount\r\n    .getState()\r\n    .mul(10 ** baseTokenAccount.account.data.tokenAmount.decimals);\r\n\r\n  Fund.execute(baseTokenAccount.pubkey, amount, fund, assetsPools);\r\n});\r\n\r\nforward({\r\n  from: InvestGate.open,\r\n  to: $currentFund,\r\n});\r\n","import React, { FC, useMemo } from 'react';\r\n\r\nimport { styled } from '@linaria/react';\r\nimport { useGate, useStore } from 'effector-react';\r\nimport BN from 'bn.js';\r\nimport { Decimal } from 'decimal.js';\r\nimport { Modal } from 'components/common/Modal';\r\nimport { Button } from 'components/ui/Button';\r\nimport { Avatar } from 'components/common/Avatar';\r\nimport { Input } from 'components/ui/Input';\r\nimport { shortAddress } from 'utils/common';\r\nimport { FundType } from '../../../models/types';\r\nimport { FUNDS } from '../../../config/funds';\r\nimport {\r\n  $amount,\r\n  $baseTokenAccount,\r\n  $isLoading,\r\n  changeAmount,\r\n  investClicked,\r\n  InvestGate,\r\n  setAmount,\r\n} from './model';\r\n\r\nconst WrapperModal = styled(Modal)`\r\n  flex-basis: 512px;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  & > :not(:last-child) {\r\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n  }\r\n`;\r\n\r\nconst InvestWrapper = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst FundInfoWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  padding: 32px 0;\r\n`;\r\n\r\nconst FundName = styled.div`\r\n  margin-top: 8px;\r\n\r\n  color: #000000;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n`;\r\n\r\nconst InputsWrapper = styled.div`\r\n  & > :not(:last-child) {\r\n    margin-bottom: 24px;\r\n  }\r\n`;\r\n\r\nconst BalanceWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n\r\n  padding: 12px 0 38px;\r\n`;\r\n\r\nconst OptionsWrapper = styled.div`\r\n  display: flex;\r\n\r\n  & > :not(:last-child) {\r\n    margin-right: 10px;\r\n  }\r\n`;\r\n\r\nconst AvailableBalance = styled.div`\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n\r\n  cursor: pointer;\r\n`;\r\n\r\nconst Option = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  height: 34px;\r\n  padding: 0 15px;\r\n\r\n  color: #a3a5ba;\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 100%;\r\n\r\n  background: #fbfbfd;\r\n  border-radius: 12px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TransactionInfoWrapper = styled.div`\r\n  padding: 20px;\r\n`;\r\n\r\nconst InfoLine = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n\r\n  font-family: Titillium Web, sans-serif;\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 24px;\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 8px;\r\n  }\r\n`;\r\n\r\nconst InfoLeft = styled.div`\r\n  color: #a3a5ba;\r\n`;\r\n\r\nconst InfoRight = styled.div`\r\n  color: #000000;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  padding: 24px 20px;\r\n`;\r\n\r\nconst InvestButton = styled(Button)`\r\n  height: 56px;\r\n\r\n  font-weight: 600;\r\n  font-size: 16px;\r\n  line-height: 140%;\r\n`;\r\n\r\ninterface Props {\r\n  fund: FundType;\r\n  close: () => void;\r\n}\r\n\r\nexport const Invest: FC<Props> = ({ fund, close }) => {\r\n  useGate(InvestGate, fund);\r\n  const baseTokenAccount = useStore($baseTokenAccount);\r\n  const amount = useStore($amount);\r\n  const isLoading = useStore($isLoading);\r\n\r\n  const fundMeta = useMemo(\r\n    () =>\r\n      FUNDS.devnet.find(\r\n        (fundItem) => fundItem.address === fund.pubkey.toBase58(),\r\n      ),\r\n    [fund],\r\n  );\r\n\r\n  const handleAllBalanceClick = () => {\r\n    if (!baseTokenAccount) {\r\n      return;\r\n    }\r\n\r\n    setAmount(new Decimal(baseTokenAccount.account.data.tokenAmount.uiAmount));\r\n  };\r\n\r\n  return (\r\n    <WrapperModal title=\"Invest\" close={close}>\r\n      <Wrapper>\r\n        <InvestWrapper>\r\n          <FundInfoWrapper>\r\n            <Avatar size={64} src={fundMeta?.icon} />\r\n            <FundName>\r\n              {fundMeta\r\n                ? `${fundMeta.fundName} (${fundMeta.fundSymbol})`\r\n                : fund.account.data.name}\r\n            </FundName>\r\n          </FundInfoWrapper>\r\n          <InputsWrapper>\r\n            <Input\r\n              prefix=\"Buy\"\r\n              postfix={\r\n                fundMeta\r\n                  ? fundMeta.fundSymbol\r\n                  : shortAddress(fund.account.data.poolTokenMint.toBase58())\r\n              }\r\n              placeholder=\"0.0\"\r\n            />\r\n            <Input\r\n              prefix=\"Pay\"\r\n              postfix=\"USDC\"\r\n              placeholder=\"0.0\"\r\n              value={amount.toString()}\r\n              onChange={changeAmount}\r\n            />\r\n          </InputsWrapper>\r\n          {baseTokenAccount ? (\r\n            <BalanceWrapper>\r\n              <OptionsWrapper>\r\n                <Option onClick={handleAllBalanceClick}>\r\n                  Max: {baseTokenAccount.account.data.tokenAmount.uiAmount}\r\n                </Option>\r\n                <Option\r\n                  onClick={() =>\r\n                    setAmount(\r\n                      new Decimal(\r\n                        baseTokenAccount.account.data.tokenAmount.uiAmount / 2,\r\n                      ),\r\n                    )\r\n                  }\r\n                >\r\n                  1/2\r\n                </Option>\r\n                <Option\r\n                  onClick={() =>\r\n                    setAmount(\r\n                      new Decimal(\r\n                        baseTokenAccount.account.data.tokenAmount.uiAmount / 4,\r\n                      ),\r\n                    )\r\n                  }\r\n                >\r\n                  1/4\r\n                </Option>\r\n              </OptionsWrapper>\r\n              <AvailableBalance onClick={handleAllBalanceClick}>\r\n                Balance: {baseTokenAccount.account.data.tokenAmount.uiAmount}{' '}\r\n                USDC\r\n              </AvailableBalance>\r\n            </BalanceWrapper>\r\n          ) : null}\r\n        </InvestWrapper>\r\n        {/* <TransactionInfoWrapper>\r\n          <InfoLine>\r\n            <InfoLeft>You’ll receive:</InfoLeft>\r\n            <InfoRight>\r\n              21.1507{' '}\r\n              {fundMeta\r\n                ? fundMeta.fundSymbol\r\n                : shortAddress(fund.account.data.poolTokenMint.toBase58())}\r\n            </InfoRight>\r\n          </InfoLine>\r\n          <InfoLine>\r\n            <InfoLeft>Transaction Fee:</InfoLeft>\r\n            <InfoRight>0.00012 SOL</InfoRight>\r\n          </InfoLine>\r\n        </TransactionInfoWrapper> */}\r\n        <Footer>\r\n          <InvestButton\r\n            full\r\n            primary\r\n            onClick={investClicked}\r\n            disabled\r\n          >\r\n            {isLoading ? 'Loading...' : 'Temporarily unavailable'}\r\n          </InvestButton>\r\n        </Footer>\r\n      </Wrapper>\r\n    </WrapperModal>\r\n  );\r\n};\r\n"],"sourceRoot":""}