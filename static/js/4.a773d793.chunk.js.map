{"version":3,"sources":["components/common/Modal/Modal.tsx","components/ui/Input/Input.tsx","api/fund/index.ts","components/modals/Invest/model.ts","components/modals/Invest/Invest.tsx"],"names":["Wrapper","Header","Title","Description","CloseWrapper","Content","Modal","className","title","description","close","onClick","children","Somefix","WrapperLabel","InputElement","Input","useState","style","classNames","isFocus","left","placeholder","value","onChange","onFocus","setIsFocus","onBlur","right","createAccountByMint","owner","token","instructions","cleanupInstructions","signers","a","connection","getConnection","newAccount","Account","getMinimumBalanceForRentExemption","AccountLayout","span","accountRentExempt","push","SystemProgram","createAccount","fromPubkey","getWallet","pubkey","newAccountPubkey","publicKey","lamports","space","programId","TOKEN_PROGRAM_ID","SPLToken","createInitAccountInstruction","adjustForSlippage","amount","direction","slippage","slippageFractional","slippageMultiplier","isReverseSwap","pool","fromToken","mintA","equals","Fund","baseTokenAccount","baseAmount","fund","pools","account","data","poolTokenMint","poolTokenMintPopulated","assets","fundState","lqdFeeVault","initializerFeeVault","Error","toBase58","fundVaultAccounts","map","asset","vaultAddress","PublicKey","findProgramAddress","toBuffer","DTF_PROGRAM_ID","authority","userPoolTokenAccount","userTransferAuthority","Decimal","userAssetsAccountsPromises","index","vaultPopulated","find","mint","mintB","tokenAccountAPopulated","tokenAccountBPopulated","weight","assetWeights","fromAmount","div","console","log","toString","isReverse","feeRatio","tradeFeeNumerator","toNumber","tradeFeeDenominator","tokenAmount","firstAmountInPool","secondAmountInPool","adjustedAmount","invariant","mul","newFromAmountInPool","add","newToAmountInPool","divToInt","grossToAmount","sub","fees","floor","minimumToAmountWithoutSlippage","minimumToAmountWithSlippage","poolIntoAccount","tokenAccountB","tokenAccountA","poolFromAccount","userAssetAccount","createApproveInstruction","u64","TokenSwap","swapInstruction","address","mintAuthority","feeAccount","SWAP_PROGRAM_ID","Numberu64","totalPoolTokens","Number","supply","poolAssetQuantity","poolTokensRequested","Promise","all","userAssetsAccounts","FUND","createExecuteInstruction","HOST_FEE_VAULT","BN","makeTransaction","transaction","sendTransaction","InvestGate","createGate","$amount","app","createStore","$currentFund","investClicked","createEvent","setAmount","changeAmount","$baseTokenAccount","combine","$tokenAccounts","tokenAccounts","currentFund","basicAsset","filteredTokenAccounts","filter","tokenAccount","length","$isLoading","getParsedTokenAccountsByOwnerFx","pending","fetchRatesFx","findFundsFx","findFundFx","findPoolsFx","b","c","d","e","on","_","newAmount","currentTarget","isPoolAsset","any","or","pathEq","watch","getState","error","assetsPools","$pools","decimals","execute","forward","from","open","to","WrapperModal","InvestWrapper","FundInfoWrapper","FundName","InputsWrapper","BalanceWrapper","OptionsWrapper","AvailableBalance","Option","TransactionInfoWrapper","InfoLine","InfoLeft","InfoRight","Footer","InvestButton","Invest","useGate","useStore","isLoading","fundMeta","useMemo","FUNDS","fundItem","handleAllBalanceClick","size","src","fundName","prefix","postfix","shortAddress","full","primary","disabled"],"mappings":"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","file":"static/js/4.a773d793.chunk.js","sourcesContent":["import React, { FunctionComponent } from 'react';\n\nimport { styled } from '@linaria/react';\nimport closeImg from './close.png';\n\nconst Wrapper = styled.div`\n  position: relative;\n\n  display: flex;\n  flex-direction: column;\n\n  background-color: #fff;\n  border-radius: 20px;\n`;\n\nconst Header = styled.div`\n  position: relative;\n\n  padding: 20px;\n\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n`;\n\nconst Title = styled.div`\n  color: #000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 100%;\n`;\n\nconst Description = styled.div`\n  margin-top: 10px;\n\n  color: rgba(0, 0, 0, 0.5);\n  font-size: 14px;\n  line-height: 17px;\n`;\n\nconst CloseWrapper = styled.div`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n\n  background: #f6f6f8 url('${closeImg}') no-repeat 50% 50%;\n  background-size: 16px;\n  border-radius: 8px;\n\n  cursor: pointer;\n`;\n\nconst Content = styled.div``;\n\ninterface Props {\n  title?: React.ReactNode;\n  description?: React.ReactNode;\n  close?: () => void;\n  className?: string;\n}\n\nexport const Modal: FunctionComponent<Props> = ({\n  title,\n  description,\n  close,\n  children,\n  className,\n}) => {\n  return (\n    <Wrapper className={className}>\n      <Header>\n        {title ? <Title>{title}</Title> : undefined}\n        {description ? <Description>{description}</Description> : undefined}\n        {close ? <CloseWrapper onClick={close} /> : undefined}\n      </Header>\n      {children ? <Content>{children}</Content> : undefined}\n    </Wrapper>\n  );\n};\n","import React, { FC, InputHTMLAttributes, useState } from 'react';\n\nimport { styled } from '@linaria/react';\nimport classNames from 'classnames';\n\nconst Somefix = styled.div`\n  min-width: 70px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 100%;\n\n  &.left {\n    text-align: left;\n  }\n\n  &.right {\n    text-align: right;\n  }\n`;\n\nconst WrapperLabel = styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  height: 56px;\n  padding: 0 20px;\n\n  background: #fbfbfd;\n  border-radius: 12px;\n\n  &.isFocus {\n    background: #fbfbfd;\n    border: 1px solid #5887ff;\n\n    ${Somefix} {\n      color: #000000;\n    }\n  }\n`;\n\nconst InputElement = styled.input`\n  height: 100%;\n  width: auto;\n  padding: 0 20px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 100%;\n  text-align: center;\n\n  outline: 0;\n\n  &::placeholder {\n    color: #a3a5ba;\n  }\n\n  &:focus {\n    color: #5887ff;\n  }\n`;\n\ninterface Props {\n  prefix: string;\n  postfix: string;\n}\n\nexport const Input: FC<Props & InputHTMLAttributes<HTMLInputElement>> = ({\n  prefix,\n  postfix,\n  placeholder,\n  value,\n  onChange,\n  style,\n  className,\n}) => {\n  const [isFocus, setIsFocus] = useState(false);\n\n  const handleFocus = () => {\n    setIsFocus(true);\n  };\n\n  const handleBlur = () => {\n    setIsFocus(false);\n  };\n\n  return (\n    <WrapperLabel style={style} className={classNames(className, { isFocus })}>\n      <Somefix className={classNames({ left: true })}>{prefix}</Somefix>\n      <InputElement\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n      <Somefix className={classNames({ right: true })}>{postfix}</Somefix>\n    </WrapperLabel>\n  );\n};\n","import { AccountLayout, Token as SPLToken, u64 } from '@solana/spl-token';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport nacl from 'tweetnacl';\nimport { Numberu64, TokenSwap } from '@solana/spl-token-swap';\nimport { Decimal } from 'decimal.js';\nimport BN from 'bn.js';\nimport { getWallet, makeTransaction, sendTransaction } from 'api/wallet';\nimport {\n  DTF_PROGRAM_ID,\n  HOST_FEE_VAULT,\n  SWAP_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from 'config';\nimport { FundType, TokenSwapPopulated } from 'models/types';\nimport { getConnection } from 'api/connection';\nimport { TokenSwapType } from 'models/connection/layouts/tokenSwap';\nimport { Fund as FUND } from '../../../../js/lib/fund';\n\nconst createAccountByMint = async (\n  owner: PublicKey,\n  token: PublicKey,\n  instructions: TransactionInstruction[],\n  cleanupInstructions: TransactionInstruction[],\n  signers: Account[],\n) => {\n  const connection = getConnection();\n  const newAccount = new Account();\n\n  const accountRentExempt = await connection.getMinimumBalanceForRentExemption(\n    AccountLayout.span,\n  );\n\n  instructions.push(\n    SystemProgram.createAccount({\n      fromPubkey: getWallet().pubkey,\n      newAccountPubkey: newAccount.publicKey,\n      lamports: accountRentExempt,\n      space: AccountLayout.span,\n      programId: TOKEN_PROGRAM_ID,\n    }),\n  );\n\n  instructions.push(\n    SPLToken.createInitAccountInstruction(\n      TOKEN_PROGRAM_ID,\n      token,\n      newAccount.publicKey,\n      owner,\n    ),\n  );\n\n  signers.push(newAccount);\n\n  return newAccount.publicKey;\n};\n\n// const createSwapTransactionInstruction = (\n//     parameters: Required<SwapParameters> & {\n//       hostFeePublicKey?: PublicKey;\n//     },\n// ): TransactionInstruction => {\n//   const isReverse = isReverseSwap(parameters);\n//   const poolIntoAccount = isReverse ? parameters.pool.tokenB : parameters.pool.tokenA;\n//   const poolFromAccount = isReverse ? parameters.pool.tokenA : parameters.pool.tokenB;\n//\n//   // handle slippage by setting a minimum expected TO amount\n//   // the transaction will fail if the received amount is lower than this.\n//   const minimumToAmountWithoutSlippage = parameters.pool.calculateAmountInOtherToken(\n//       parameters.fromAccount.mint,\n//       parameters.fromAmount,\n//       true,\n//   );\n//\n//   const minimumToAmountWithSlippage = adjustForSlippage(\n//       minimumToAmountWithoutSlippage,\n//       'down',\n//       parameters.slippage,\n//   );\n//\n//   const authority = parameters.pool.tokenSwapAuthority();\n//\n//   return TokenSwap.swapInstruction(\n//       parameters.pool.address,\n//       authority,\n//       parameters.fromAccount.address,\n//       poolIntoAccount.address,\n//       poolFromAccount.address,\n//       parameters.toAccount.address,\n//       parameters.pool.poolToken.address,\n//       parameters.pool.feeAccount.address,\n//       parameters.hostFeePublicKey || null,\n//       swapProgramId,\n//       TOKEN_PROGRAM_ID,\n//       parameters.fromAmount,\n//       minimumToAmountWithSlippage.toNumber(),\n//   );\n// };\n//\n// export const swap = () => {\n//   // Create WSOL or Token account\n//   const fromAccount =\n//       parameters.fromAccount.mint.address.equals(WRAPPED_SOL_MINT) &&\n//       parameters.fromAccount.mint.isSimulated\n//           ? await createWrappedSolAccount(\n//           parameters.fromAccount,\n//           parameters.fromAmount,\n//           instructions,\n//           cleanupInstructions,\n//           signers,\n//           )\n//           : parameters.fromAccount;\n//\n//   // get the toAccount from the parameters, or create it if not present\n//   const isReverse = isReverseSwap(parameters);\n//   const toToken = isReverse ? parameters.pool.tokenA.mint : parameters.pool.tokenB.mint;\n//\n//   // Token account or Create Token account\n//   const toAccount =\n//       parameters.toAccount && !parameters.toAccount.mint.address.equals(WRAPPED_SOL_MINT)\n//           ? parameters.toAccount\n//           : await createAccountByMint(\n//           getWallet().pubkey,\n//           toToken,\n//           instructions,\n//           cleanupInstructions,\n//           signers,\n//           );\n//\n//   console.log('Executing swap:', parameters);\n//\n//   const delegate = parameters.pool.tokenSwapAuthority();\n//\n//   // approveInstruction\n//   instructions.push(tokenAPI.approveInstruction(fromAccount, delegate, parameters.fromAmount));\n//\n//   // swapInstruction\n//   instructions.push(\n//       createSwapTransactionInstruction({\n//         fromAccount,\n//         fromAmount: parameters.fromAmount,\n//         toAccount,\n//         hostFeePublicKey: null,\n//         slippage: parameters.slippage || 0,\n//         pool: parameters.pool,\n//       }),\n//   );\n// }\n\ntype SlippageDirection = 'down' | 'up';\n/**\n * Adjust an amount either up or down according to a slippage parameter\n * The default slippage parameter is DEFAULT_SLIPPAGE.\n * e.g. if parameters.slippage is 0.1, the amount is 100, and the direction is\n * \"down\",\n * the result is 100 * (1 - 0.1) = 90\n *\n * @param amount\n * @param direction\n * @param slippage\n */\nexport const adjustForSlippage = (\n  amount: number,\n  direction: SlippageDirection,\n  slippage = 0,\n) => {\n  const slippageFractional = slippage / 100;\n  const slippageMultiplier =\n    1 + (direction === 'up' ? slippageFractional : -slippageFractional);\n\n  return amount * slippageMultiplier; // TODO: check its need or not \".floor()\"\n};\n\nconst isReverseSwap = (pool: TokenSwapType, fromToken: PublicKey) =>\n  pool.mintA.equals(fromToken);\n\nexport class Fund {\n  // eslint-disable-next-line sonarjs/cognitive-complexity\n  static async execute(\n    baseTokenAccount: PublicKey,\n    baseAmount: Decimal,\n    fund: FundType,\n    pools: TokenSwapPopulated[],\n    slippage = 0.1,\n  ) {\n    const instructions: TransactionInstruction[] = [];\n    const cleanupInstructions: TransactionInstruction[] = [];\n    const signers: Account[] = [];\n\n    const {\n      poolTokenMint,\n      poolTokenMintPopulated,\n      assets,\n      fundState,\n      lqdFeeVault,\n      initializerFeeVault,\n    } = fund.account.data;\n\n    if (!poolTokenMintPopulated) {\n      throw new Error(\n        `While Fund execute did not found pool token mint info for fund: ${fund.pubkey.toBase58()}`,\n      );\n    }\n\n    if (!fundState) {\n      throw new Error(`While Fund execute fundState does not exists`);\n    }\n\n    const fundVaultAccounts = assets.map((asset) => asset.vaultAddress);\n\n    const [authority] = await PublicKey.findProgramAddress(\n      [fund.pubkey.toBuffer()],\n      DTF_PROGRAM_ID,\n    );\n\n    const userPoolTokenAccount = await createAccountByMint(\n      getWallet().pubkey,\n      poolTokenMint,\n      instructions,\n      cleanupInstructions,\n      signers,\n    );\n\n    const userTransferAuthority = new Account();\n\n    signers.push(userTransferAuthority);\n\n    let amount = new Decimal(0);\n\n    // TODO: decimal.js\n    const userAssetsAccountsPromises = assets.map(async (asset, index) => {\n      if (!asset.vaultPopulated) {\n        throw new Error(\n          `While Fund execute did not found vaultPopulated for asset: ${asset.vaultAddress.toBase58()}`,\n        );\n      }\n\n      const pool = pools.find(\n        (pool) =>\n          pool.mintA.equals(asset.mint) || pool.mintB.equals(asset.mint),\n      );\n      if (!pool) {\n        throw new Error(\n          `While Fund execute did not found pool for asset: ${asset.vaultAddress.toBase58()}`,\n        );\n      }\n\n      if (!pool.tokenAccountAPopulated || !pool.tokenAccountBPopulated) {\n        throw new Error(\n          `While Fund execute did not found tokenAccountAPopulated/tokenAccountBPopulated`,\n        );\n      }\n\n      const weight = fundState.assetWeights[index] / 10;\n      const fromAmount = baseAmount.div(weight);\n\n      console.log('fromAmount:', fromAmount.toString());\n\n      /**\n       * Swap amount calculation\n       */\n      const isReverse = isReverseSwap(pool, asset.mint);\n\n      const feeRatio =\n        pool.tradeFeeNumerator.toNumber() / pool.tradeFeeDenominator.toNumber();\n\n      // handle slippage by setting a minimum expected TO amount\n      // the transaction will fail if the received amount is lower than this.\n      const [firstAmountInPool, secondAmountInPool] = isReverse\n        ? [\n            new Decimal(pool.tokenAccountBPopulated.tokenAmount.amount),\n            new Decimal(pool.tokenAccountAPopulated.tokenAmount.amount),\n          ]\n        : [\n            new Decimal(pool.tokenAccountAPopulated.tokenAmount.amount),\n            new Decimal(pool.tokenAccountBPopulated.tokenAmount.amount),\n          ];\n\n      const adjustedAmount = fromAmount;\n\n      const invariant = firstAmountInPool.mul(secondAmountInPool);\n      const newFromAmountInPool = firstAmountInPool.add(adjustedAmount);\n\n      const newToAmountInPool = invariant.divToInt(newFromAmountInPool);\n      const grossToAmount = secondAmountInPool.sub(newToAmountInPool);\n      const fees = grossToAmount.mul(feeRatio).floor();\n\n      const minimumToAmountWithoutSlippage = grossToAmount.sub(fees).toNumber();\n\n      const minimumToAmountWithSlippage = adjustForSlippage(\n        minimumToAmountWithoutSlippage,\n        'down',\n        slippage,\n      );\n\n      /**\n       * Swap\n       */\n      const poolIntoAccount = isReverse\n        ? pool.tokenAccountB\n        : pool.tokenAccountA;\n      const poolFromAccount = isReverse\n        ? pool.tokenAccountB\n        : pool.tokenAccountA;\n\n      const userAssetAccount = await createAccountByMint(\n        getWallet().pubkey,\n        poolTokenMint,\n        instructions,\n        cleanupInstructions,\n        signers,\n      );\n\n      instructions.push(\n        SPLToken.createApproveInstruction(\n          TOKEN_PROGRAM_ID,\n          baseTokenAccount,\n          userTransferAuthority.publicKey,\n          getWallet().pubkey,\n          [],\n          new u64(fromAmount.toNumber()),\n        ),\n      );\n\n      instructions.push(\n        TokenSwap.swapInstruction(\n          pool.address,\n          new PublicKey(poolTokenMintPopulated.mintAuthority),\n          userTransferAuthority.publicKey,\n          baseTokenAccount,\n          poolIntoAccount,\n          poolFromAccount,\n          userAssetAccount,\n          poolTokenMint,\n          pool.feeAccount,\n          null,\n          SWAP_PROGRAM_ID,\n          TOKEN_PROGRAM_ID,\n          new Numberu64(fromAmount.toNumber()),\n          minimumToAmountWithSlippage,\n        ),\n      );\n\n      console.log('minimumToAmountWithSlippage:', minimumToAmountWithSlippage);\n\n      /**\n       * Pool tokens requested calculation\n       */\n      const totalPoolTokens = Number(poolTokenMintPopulated.supply);\n      const poolAssetQuantity = asset.vaultPopulated.tokenAmount.amount;\n      // const poolTokensRequested = new Decimal(\n      //   minimumToAmountWithSlippage * poolTokensSupply - poolTokensSupply + 1,\n      // ).mul(poolAssetQuantity);\n      const poolTokensRequested = new Decimal(\n        totalPoolTokens * (minimumToAmountWithSlippage - 1) + 1,\n      ).div(poolAssetQuantity);\n\n      amount = amount.add(poolTokensRequested);\n\n      return userTransferAuthority.publicKey;\n    });\n\n    const userAssetsAccounts = await Promise.all(userAssetsAccountsPromises);\n\n    // To int\n    amount = amount.floor();\n\n    console.log('amount:', amount.toString());\n\n    instructions.push(\n      FUND.createExecuteInstruction(\n        DTF_PROGRAM_ID,\n        fund.pubkey,\n        poolTokenMint,\n        fundVaultAccounts,\n        authority,\n        userPoolTokenAccount,\n        userAssetsAccounts,\n        getWallet().pubkey,\n        lqdFeeVault,\n        initializerFeeVault,\n        HOST_FEE_VAULT,\n        TOKEN_PROGRAM_ID,\n        new BN(amount.toString()),\n      ),\n    );\n\n    const transaction = await makeTransaction(\n      [...instructions, ...cleanupInstructions],\n      signers,\n    );\n\n    return sendTransaction(transaction);\n  }\n}\n","import { combine, forward } from 'effector';\nimport { createGate } from 'effector-react';\nimport Decimal from 'decimal.js';\nimport { any, or, pathEq } from 'ramda';\nimport { app } from 'models/app';\nimport { ButtonClick, InputChange } from 'types/effector';\nimport { AssetType, FundType } from 'models/types';\nimport { $pools, findPoolsFx } from 'models/pools';\nimport { Fund } from 'api/fund';\nimport {\n  $tokenAccounts,\n  getParsedTokenAccountsByOwnerFx,\n} from 'models/connection';\nimport { TokenSwapType } from 'models/connection/layouts/tokenSwap';\nimport { fetchRatesFx } from '../../../models/rates';\nimport { findFundFx, findFundsFx } from '../../../models/funds';\n\nexport const InvestGate = createGate<FundType>();\n\nexport const $amount = app.createStore<Decimal>(new Decimal(0));\n\nexport const $currentFund = app.createStore<FundType | null>(null);\n\nexport const investClicked = app.createEvent<ButtonClick>();\n\nexport const setAmount = app.createEvent<Decimal>();\nexport const changeAmount = app.createEvent<InputChange>();\n\nexport const $baseTokenAccount = combine(\n  $tokenAccounts,\n  $currentFund,\n  (tokenAccounts, currentFund) => {\n    if (!currentFund) {\n      return null;\n    }\n\n    const token = currentFund.account.data.fundState?.basicAsset.mint.toBase58();\n\n    if (!token) {\n      return null;\n    }\n\n    const filteredTokenAccounts = tokenAccounts.filter(\n      (tokenAccount) => tokenAccount.account.data.mint === token,\n    );\n\n    if (filteredTokenAccounts.length === 0) {\n      return null;\n    }\n\n    return filteredTokenAccounts[0];\n  },\n);\n\nexport const $isLoading = combine(\n  getParsedTokenAccountsByOwnerFx.pending,\n  fetchRatesFx.pending,\n  findFundsFx.pending,\n  findFundFx.pending,\n  findPoolsFx.pending,\n  (a, b, c, d, e) => a || b || c || d || e,\n);\n\n$amount\n  .on(setAmount, (_, newAmount) => newAmount)\n  .on(changeAmount, (_, e) => new Decimal(Number(e.currentTarget.value)));\n\nconst isPoolAsset = (assets: AssetType[]) => (pool: TokenSwapType) =>\n  any(or(pathEq(['mint'], pool.mintA), pathEq(['mint'], pool.mintB)), assets);\n\ninvestClicked.watch(async () => {\n  const fund = $currentFund.getState();\n  if (!fund) {\n    console.error('fund did not passed');\n    return;\n  }\n\n  const baseTokenAccount = $baseTokenAccount.getState();\n  if (!baseTokenAccount) {\n    console.error('baseTokenAccount did not passed');\n    return;\n  }\n\n  const assetsPools = $pools\n    .getState()\n    .filter(isPoolAsset(fund.account.data.assets));\n  if (assetsPools.length !== fund.account.data.assets.length) {\n    console.error('did not enought pools for assets');\n    return;\n  }\n\n  const amount = $amount\n    .getState()\n    .mul(10 ** baseTokenAccount.account.data.tokenAmount.decimals);\n\n  Fund.execute(baseTokenAccount.pubkey, amount, fund, assetsPools);\n});\n\nforward({\n  from: InvestGate.open,\n  to: $currentFund,\n});\n","import React, { FC, useMemo } from 'react';\n\nimport { styled } from '@linaria/react';\nimport { useGate, useStore } from 'effector-react';\nimport BN from 'bn.js';\nimport { Decimal } from 'decimal.js';\nimport { Modal } from 'components/common/Modal';\nimport { Button } from 'components/ui/Button';\nimport { Avatar } from 'components/common/Avatar';\nimport { Input } from 'components/ui/Input';\nimport { shortAddress } from 'utils/common';\nimport { FundType } from '../../../models/types';\nimport { FUNDS } from '../../../config/funds';\nimport {\n  $amount,\n  $baseTokenAccount,\n  $isLoading,\n  changeAmount,\n  investClicked,\n  InvestGate,\n  setAmount,\n} from './model';\n\nconst WrapperModal = styled(Modal)`\n  flex-basis: 512px;\n`;\n\nconst Wrapper = styled.div`\n  & > :not(:last-child) {\n    border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n  }\n`;\n\nconst InvestWrapper = styled.div`\n  padding: 0 20px;\n`;\n\nconst FundInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  padding: 32px 0;\n`;\n\nconst FundName = styled.div`\n  margin-top: 8px;\n\n  color: #000000;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n`;\n\nconst InputsWrapper = styled.div`\n  & > :not(:last-child) {\n    margin-bottom: 24px;\n  }\n`;\n\nconst BalanceWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  padding: 12px 0 38px;\n`;\n\nconst OptionsWrapper = styled.div`\n  display: flex;\n\n  & > :not(:last-child) {\n    margin-right: 10px;\n  }\n`;\n\nconst AvailableBalance = styled.div`\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n\n  cursor: pointer;\n`;\n\nconst Option = styled.div`\n  display: flex;\n  align-items: center;\n  height: 34px;\n  padding: 0 15px;\n\n  color: #a3a5ba;\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 100%;\n\n  background: #fbfbfd;\n  border-radius: 12px;\n  cursor: pointer;\n`;\n\nconst TransactionInfoWrapper = styled.div`\n  padding: 20px;\n`;\n\nconst InfoLine = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  font-family: Titillium Web, sans-serif;\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 24px;\n\n  &:not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nconst InfoLeft = styled.div`\n  color: #a3a5ba;\n`;\n\nconst InfoRight = styled.div`\n  color: #000000;\n`;\n\nconst Footer = styled.div`\n  padding: 24px 20px;\n`;\n\nconst InvestButton = styled(Button)`\n  height: 56px;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 140%;\n`;\n\ninterface Props {\n  fund: FundType;\n  close: () => void;\n}\n\nexport const Invest: FC<Props> = ({ fund, close }) => {\n  useGate(InvestGate, fund);\n  const baseTokenAccount = useStore($baseTokenAccount);\n  const amount = useStore($amount);\n  const isLoading = useStore($isLoading);\n\n  const fundMeta = useMemo(\n    () =>\n      FUNDS.devnet.find(\n        (fundItem) => fundItem.address === fund.pubkey.toBase58(),\n      ),\n    [fund],\n  );\n\n  const handleAllBalanceClick = () => {\n    if (!baseTokenAccount) {\n      return;\n    }\n\n    setAmount(new Decimal(baseTokenAccount.account.data.tokenAmount.uiAmount));\n  };\n\n  return (\n    <WrapperModal title=\"Invest\" close={close}>\n      <Wrapper>\n        <InvestWrapper>\n          <FundInfoWrapper>\n            <Avatar size={64} src={fundMeta?.icon} />\n            <FundName>\n              {fundMeta\n                ? `${fundMeta.fundName} (${fundMeta.fundSymbol})`\n                : fund.account.data.name}\n            </FundName>\n          </FundInfoWrapper>\n          <InputsWrapper>\n            <Input\n              prefix=\"Buy\"\n              postfix={\n                fundMeta\n                  ? fundMeta.fundSymbol\n                  : shortAddress(fund.account.data.poolTokenMint.toBase58())\n              }\n              placeholder=\"0.0\"\n            />\n            <Input\n              prefix=\"Pay\"\n              postfix=\"USDC\"\n              placeholder=\"0.0\"\n              value={amount.toString()}\n              onChange={changeAmount}\n            />\n          </InputsWrapper>\n          {baseTokenAccount ? (\n            <BalanceWrapper>\n              <OptionsWrapper>\n                <Option onClick={handleAllBalanceClick}>\n                  Max: {baseTokenAccount.account.data.tokenAmount.uiAmount}\n                </Option>\n                <Option\n                  onClick={() =>\n                    setAmount(\n                      new Decimal(\n                        baseTokenAccount.account.data.tokenAmount.uiAmount / 2,\n                      ),\n                    )\n                  }\n                >\n                  1/2\n                </Option>\n                <Option\n                  onClick={() =>\n                    setAmount(\n                      new Decimal(\n                        baseTokenAccount.account.data.tokenAmount.uiAmount / 4,\n                      ),\n                    )\n                  }\n                >\n                  1/4\n                </Option>\n              </OptionsWrapper>\n              <AvailableBalance onClick={handleAllBalanceClick}>\n                Balance: {baseTokenAccount.account.data.tokenAmount.uiAmount}{' '}\n                USDC\n              </AvailableBalance>\n            </BalanceWrapper>\n          ) : null}\n        </InvestWrapper>\n        <TransactionInfoWrapper>\n          <InfoLine>\n            <InfoLeft>You’ll receive:</InfoLeft>\n            <InfoRight>\n              21.1507{' '}\n              {fundMeta\n                ? fundMeta.fundSymbol\n                : shortAddress(fund.account.data.poolTokenMint.toBase58())}\n            </InfoRight>\n          </InfoLine>\n          <InfoLine>\n            <InfoLeft>Transaction Fee:</InfoLeft>\n            <InfoRight>0.00012 SOL</InfoRight>\n          </InfoLine>\n        </TransactionInfoWrapper>\n        <Footer>\n          <InvestButton\n            full\n            primary\n            onClick={investClicked}\n            disabled={isLoading}\n          >\n            {isLoading ? 'Loading...' : 'Invest now'}gst\n          </InvestButton>\n        </Footer>\n      </Wrapper>\n    </WrapperModal>\n  );\n};\n"],"sourceRoot":""}